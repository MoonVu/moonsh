// Script debug ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu seat
const API_BASE_URL = 'http://172.16.1.6:5000';

async function debugSeatData() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra d·ªØ li·ªáu seat...');
    
    // L·∫•y d·ªØ li·ªáu seat
    const response = await fetch(`${API_BASE_URL}/api/seat`);
    const data = await response.json();
    
    if (data.success) {
      const seat = data.data;
      console.log('üìä D·ªØ li·ªáu seat:', seat);
      
      console.log('\nüîç Ki·ªÉm tra walkwayColIndexes:', seat.walkwayColIndexes);
      console.log('üîç Ki·ªÉm tra lastModifiedBy:', seat.lastModifiedBy);
      
      // Ki·ªÉm tra grid c√≥ walkway-vertical kh√¥ng
      let walkwayCount = 0;
      seat.grid.forEach((row, rowIdx) => {
        if (Array.isArray(row)) {
          row.forEach((cell, colIdx) => {
            if (cell && cell.type === 'walkway-vertical') {
              walkwayCount++;
              console.log(`üìç T√¨m th·∫•y walkway-vertical t·∫°i row ${rowIdx}, col ${colIdx}:`, cell);
            }
          });
        }
      });
      
      console.log(`\nüìà T·ªïng s·ªë walkway-vertical trong grid: ${walkwayCount}`);
      console.log(`üìà S·ªë walkwayColIndexes: ${seat.walkwayColIndexes.length}`);
      
      if (walkwayCount !== seat.walkwayColIndexes.length) {
        console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: S·ªë l∆∞·ª£ng walkway-vertical kh√¥ng kh·ªõp v·ªõi walkwayColIndexes!');
      }
      
    } else {
      console.error('‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu seat:', data.message);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  }
}

// Ch·∫°y debug
debugSeatData(); 