import React, { useState, useEffect } from 'react';
import { Card, Table, Button, Tag, Modal, Form, Input, Select, message, Space, Typography, Badge } from 'antd';
import { CheckCircleOutlined, CloseCircleOutlined, EyeOutlined, LoadingOutlined } from '@ant-design/icons';
import apiService from '../../services/api';
import './AdminDashboard.css';

const { TextArea } = Input;
const { Text, Title } = Typography;

const AdminDashboard = () => {
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showDetailModal, setShowDetailModal] = useState(false);
  const [showActionModal, setShowActionModal] = useState(false);
  const [actionType, setActionType] = useState(''); // 'approve' ho·∫∑c 'reject'
  const [actionForm] = Form.useForm();
  const [processing, setProcessing] = useState(false);

  const systemStats = {
    totalUsers: 3,
    activeUsers: 0,
    pendingTasks: requests.filter(req => req.status === 'pending').length,
    completedTasks: requests.filter(req => req.status === 'approved' || req.status === 'rejected').length
  };

  // Load danh s√°ch t·∫•t c·∫£ requests
  const loadRequests = async () => {
    try {
      setLoading(true);
      const response = await apiService.getAllRequests();
      console.log('üìã API Response:', response);
      console.log('üìã Response data:', response.data);
      
      if (response.data && Array.isArray(response.data)) {
        setRequests(response.data);
        if (response.data.length > 0) {
          console.log('üìã First request:', response.data[0]);
          console.log('üìã First request user:', response.data[0].user);
          console.log('üìã First request user_id:', response.data[0].user_id);
        }
      } else {
        console.warn('‚ö†Ô∏è Response data kh√¥ng ph·∫£i array:', response.data);
        setRequests([]);
      }
    } catch (error) {
      console.error('L·ªói khi load requests:', error);
      message.error('Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u c·∫ßu');
    } finally {
      setLoading(false);
    }
  };

  // X·ª≠ l√Ω ph√™ duy·ªát request
  const handleApprove = async (requestId, adminNote) => {
    try {
      setProcessing(true);
      const response = await apiService.updateRequestStatus(requestId, 'approved', adminNote);
      if (response.success) {
        message.success('ƒê√£ ph√™ duy·ªát y√™u c·∫ßu th√†nh c√¥ng!');
        setShowActionModal(false);
        setSelectedRequest(null);
        actionForm.resetFields();
        loadRequests(); // Reload danh s√°ch
      } else {
        message.error(response.error || 'C√≥ l·ªói x·∫£y ra khi ph√™ duy·ªát');
      }
    } catch (error) {
      console.error('L·ªói khi ph√™ duy·ªát:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi ph√™ duy·ªát');
    } finally {
      setProcessing(false);
    }
  };

  // X·ª≠ l√Ω t·ª´ ch·ªëi request
  const handleReject = async (requestId, adminNote) => {
    try {
      setProcessing(true);
      const response = await apiService.updateRequestStatus(requestId, 'rejected', adminNote);
      if (response.success) {
        message.success('ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu th√†nh c√¥ng!');
        setShowActionModal(false);
        setSelectedRequest(null);
        actionForm.resetFields();
        loadRequests(); // Reload danh s√°ch
      } else {
        message.error(response.error || 'C√≥ l·ªói x·∫£y ra khi t·ª´ ch·ªëi');
      }
    } catch (error) {
      console.error('L·ªói khi t·ª´ ch·ªëi:', error);
      message.error('C√≥ l·ªói x·∫£y ra khi t·ª´ ch·ªëi');
    } finally {
      setProcessing(false);
    }
  };

  // X·ª≠ l√Ω submit form action
  const handleActionSubmit = async (values) => {
    if (!selectedRequest) return;
    
    if (actionType === 'approve') {
      await handleApprove(selectedRequest._id, values.adminNote);
    } else if (actionType === 'reject') {
      await handleReject(selectedRequest._id, values.adminNote);
    }
  };

  // M·ªü modal action
  const openActionModal = (request, type) => {
    setSelectedRequest(request);
    setActionType(type);
    setShowActionModal(true);
    actionForm.resetFields();
  };

  // M·ªü modal xem chi ti·∫øt
  const openDetailModal = (request) => {
    setSelectedRequest(request);
    setShowDetailModal(true);
  };

  // C·ªôt cho b·∫£ng requests
  const columns = [
    {
      title: 'Ng√†y y√™u c·∫ßu',
      dataIndex: 'metadata',
      key: 'date',
      width: 120,
      render: (metadata, record) => {
        if (metadata?.from_date) {
          const date = new Date(metadata.from_date);
          return (
            <div style={{ textAlign: 'center' }}>
              <div style={{ 
                fontSize: '16px', 
                fontWeight: 'bold', 
                color: '#1890ff',
                marginBottom: '4px'
              }}>
                {date.getDate()}
              </div>
              <div style={{ 
                fontSize: '12px', 
                color: '#666'
              }}>
                {date.getMonth() + 1}/{date.getFullYear()}
              </div>
            </div>
          );
        }
        return <Text type="secondary">Kh√¥ng c√≥ ng√†y</Text>;
      }
    },
    {
      title: 'Lo·∫°i y√™u c·∫ßu',
      dataIndex: 'request_type',
      key: 'request_type',
      width: 120,
      render: (type, record) => {
        // Logic ph√¢n lo·∫°i request type ch√≠nh x√°c h∆°n
        let displayType = type;
        let displayColor = '#666';
        
        if (type === 'monthly_off') {
          displayType = 'OFF';
          displayColor = '#1890ff'; // Xanh d∆∞∆°ng
        } else if (type === 'overtime_day') {
          displayType = 'TƒÉng ca';
          displayColor = '#52c41a'; // Xanh l√°
        } else if (type === 'half_day_off') {
          displayType = 'OFF n·ª≠a ca';
          displayColor = '#fa8c16'; // Cam
        } else if (type === 'annual_leave') {
          displayType = 'Ngh·ªâ ph√©p nƒÉm';
          displayColor = '#722ed1'; // T√≠m
        } else if (type === 'overtime_day') {
          displayType = 'TƒÉng ca 1 ng√†y';
          displayColor = '#52c41a'; // Xanh l√°
        } else if (type === 'overtime_hours') {
          displayType = 'TƒÉng ca theo gi·ªù';
          displayColor = '#52c41a'; // Xanh l√°
        }
        
        return (
          <Tag color={displayColor}>
            {displayType}
          </Tag>
        );
      }
    },
    {
      title: 'Nh√¢n vi√™n',
      dataIndex: 'user',
      key: 'user',
      width: 120,
      render: (user, record) => {
        if (user) {
          return (
            <div>
              <div style={{ fontWeight: 'bold' }}>{user.username}</div>
              <div style={{ fontSize: '12px', color: '#666' }}>{user.group_name}</div>
            </div>
          );
        }
        return <Text type="secondary">Kh√¥ng c√≥ th√¥ng tin</Text>;
      }
    },
    {
      title: 'N·ªôi dung',
      dataIndex: 'content',
      key: 'content',
      width: 200,
      ellipsis: true,
      render: (content) => (
        <Text style={{ fontSize: '12px' }}>{content}</Text>
      )
    },
    {
      title: 'Ghi ch√∫',
      dataIndex: 'description',
      key: 'description',
      width: 150,
      ellipsis: true,
      render: (description) => (
        <Text style={{ fontSize: '12px' }}>{description || 'Kh√¥ng c√≥'}</Text>
      )
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'status',
      key: 'status',
      width: 100,
      render: (status) => {
        const statusConfig = {
          'pending': { color: 'processing', text: 'Ch·ªù duy·ªát', icon: <LoadingOutlined /> },
          'approved': { color: 'success', text: 'ƒê√£ duy·ªát', icon: <CheckCircleOutlined /> },
          'rejected': { color: 'error', text: 'T·ª´ ch·ªëi', icon: <CloseCircleOutlined /> },
          'processing': { color: 'warning', text: 'ƒêang x·ª≠ l√Ω', icon: <LoadingOutlined /> },
          'cancelled': { color: 'default', text: 'ƒê√£ h·ªßy', icon: <CloseCircleOutlined /> }
        };
        
        const config = statusConfig[status] || { color: 'default', text: status, icon: null };
        
        return (
          <Tag color={config.color} icon={config.icon}>
            {config.text}
          </Tag>
        );
      }
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      width: 200,
      render: (_, record) => {
        if (record.status === 'pending') {
          return (
            <Space>
              <Button 
                type="primary" 
                size="small" 
                icon={<CheckCircleOutlined />}
                onClick={() => openActionModal(record, 'approve')}
              >
                Duy·ªát
              </Button>
              <Button 
                danger 
                size="small" 
                icon={<CloseCircleOutlined />}
                onClick={() => openActionModal(record, 'reject')}
              >
                T·ª´ ch·ªëi
              </Button>
              <Button 
                size="small" 
                icon={<EyeOutlined />}
                onClick={() => openDetailModal(record)}
              >
                Chi ti·∫øt
              </Button>
            </Space>
          );
        }
        
        return (
          <Space>
            <Button 
              size="small" 
              icon={<EyeOutlined />}
              onClick={() => openDetailModal(record)}
            >
              Chi ti·∫øt
            </Button>
          </Space>
        );
      }
    }
  ];

  // Load data khi component mount
  useEffect(() => {
    loadRequests();
  }, []);

  return (
    <div className="admin-dashboard">
      <div className="admin-header">
        <h1>üéõÔ∏è B·∫£ng ƒëi·ªÅu khi·ªÉn Qu·∫£n tr·ªã vi√™n</h1>
        <p>Qu·∫£n l√Ω v√† ph√™ duy·ªát c√°c y√™u c·∫ßu t·ª´ nh√¢n vi√™n</p>
      </div>

      <div className="admin-content">
        {/* Th·ªëng k√™ t·ªïng quan */}
        <div className="stats-grid">
          <div className="stat-card">
            <div className="stat-icon">üë•</div>
            <div className="stat-info">
              <h3>{systemStats.totalUsers}</h3>
              <p>T·ªïng nh√¢n vi√™n</p>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚úÖ</div>
            <div className="stat-info">
              <h3>{systemStats.activeUsers}</h3>
              <p>ƒêang ho·∫°t ƒë·ªông</p>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">‚è≥</div>
            <div className="stat-info">
              <h3>
                <Badge count={systemStats.pendingTasks} size="small">
                  {systemStats.pendingTasks}
                </Badge>
              </h3>
              <p>Ch·ªù ph√™ duy·ªát</p>
            </div>
          </div>
          
          <div className="stat-card">
            <div className="stat-icon">üéØ</div>
            <div className="stat-info">
              <h3>{systemStats.completedTasks}</h3>
              <p>ƒê√£ x·ª≠ l√Ω</p>
            </div>
          </div>
        </div>

        {/* Ph·∫ßn ch√≠nh: Qu·∫£n l√Ω y√™u c·∫ßu */}
        <div className="main-approval-section">
          <div className="section-header">
            <h2>üìã Qu·∫£n l√Ω y√™u c·∫ßu t·ª´ nh√¢n vi√™n</h2>
            <p>Ph√™ duy·ªát c√°c y√™u c·∫ßu OFF, OFF n·ª≠a ca, tƒÉng ca t·ª´ nh√¢n vi√™n</p>
          </div>
          
          <Card>
            <Table 
              dataSource={requests} 
              columns={columns} 
              rowKey="_id"
              loading={loading}
              pagination={{ 
                pageSize: 10,
                showSizeChanger: true,
                showQuickJumper: true,
                showTotal: (total, range) => `${range[0]}-${range[1]} c·ªßa ${total} y√™u c·∫ßu`
              }}
              size="middle"
            />
          </Card>
        </div>

        {/* Quick Actions */}
        <div className="quick-actions">
          <h2>‚ö° Thao t√°c nhanh</h2>
          <div className="action-buttons">
            <button className="action-btn primary" onClick={loadRequests}>
              üîÑ L√†m m·ªõi danh s√°ch
            </button>
            <button className="action-btn warning">
              ‚è≥ Ch·ªù ph√™ duy·ªát ({systemStats.pendingTasks})
            </button>
            <button className="action-btn">üìä Xem b√°o c√°o t·ªïng h·ª£p</button>
            <button className="action-btn">üë• Qu·∫£n l√Ω nh√¢n vi√™n</button>
          </div>
        </div>
      </div>

      {/* Modal xem chi ti·∫øt */}
      <Modal
        title="Chi ti·∫øt y√™u c·∫ßu"
        open={showDetailModal}
        onCancel={() => setShowDetailModal(false)}
        footer={null}
        width={600}
      >
        {selectedRequest && (
          <div>
            <p><strong>Lo·∫°i y√™u c·∫ßu:</strong> {selectedRequest.request_type}</p>
            <p><strong>N·ªôi dung:</strong> {selectedRequest.content}</p>
            <p><strong>Ghi ch√∫:</strong> {selectedRequest.description || 'Kh√¥ng c√≥'}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> {selectedRequest.status}</p>
            <p><strong>Ng√†y t·∫°o:</strong> {new Date(selectedRequest.createdAt).toLocaleString('vi-VN')}</p>
            {selectedRequest.metadata && (
              <div>
                <p><strong>Ng√†y y√™u c·∫ßu:</strong> {selectedRequest.metadata.from_date}</p>
                {selectedRequest.metadata.reason && (
                  <p><strong>L√Ω do:</strong> {selectedRequest.metadata.reason}</p>
                )}
              </div>
            )}
          </div>
        )}
      </Modal>

      {/* Modal ph√™ duy·ªát/t·ª´ ch·ªëi */}
      <Modal
        title={actionType === 'approve' ? 'Ph√™ duy·ªát y√™u c·∫ßu' : 'T·ª´ ch·ªëi y√™u c·∫ßu'}
        open={showActionModal}
        onCancel={() => setShowActionModal(false)}
        footer={null}
        width={500}
      >
        <Form
          form={actionForm}
          layout="vertical"
          onFinish={handleActionSubmit}
        >
          <Form.Item
            label="Ghi ch√∫ c·ªßa admin"
            name="adminNote"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ghi ch√∫!' }]}
          >
            <TextArea 
              rows={4} 
              placeholder={
                actionType === 'approve' 
                  ? 'Nh·∫≠p ghi ch√∫ khi ph√™ duy·ªát (b·∫Øt bu·ªôc)...'
                  : 'Nh·∫≠p l√Ω do t·ª´ ch·ªëi (b·∫Øt bu·ªôc)...'
              }
            />
          </Form.Item>

          <Form.Item style={{ textAlign: 'center', marginBottom: 0 }}>
            <Space>
              <Button onClick={() => setShowActionModal(false)}>
                H·ªßy
              </Button>
              <Button 
                type={actionType === 'approve' ? 'primary' : 'danger'} 
                htmlType="submit" 
                loading={processing}
              >
                {actionType === 'approve' ? 'Ph√™ duy·ªát' : 'T·ª´ ch·ªëi'}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default AdminDashboard;
