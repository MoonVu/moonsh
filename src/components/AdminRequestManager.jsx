import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import { apiService } from '../services/api';
import './AdminRequestManager.css';

const AdminRequestManager = () => {
  const { user } = useAuth();
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filters, setFilters] = useState({
    status: '',
    request_type: '',
    user_id: '',
    date_from: '',
    date_to: ''
  });
  const [stats, setStats] = useState({});
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [processingRequest, setProcessingRequest] = useState(null);
  const [users, setUsers] = useState([]);

  const requestTypes = {
    'monthly_off': 'L·ªãch OFF th√°ng',
    'half_day_off': 'L·ªãch OFF n·ª≠a ca',
    'annual_leave': 'L·ªãch ngh·ªâ ph√©p nƒÉm'
  };

  const statusLabels = {
    'pending': 'Ch·ªù duy·ªát',
    'processing': 'ƒêang x·ª≠ l√Ω',
    'approved': 'ƒê√£ duy·ªát',
    'rejected': 'T·ª´ ch·ªëi',
    'cancelled': 'ƒê√£ h·ªßy'
  };

  const statusColors = {
    'pending': '#f39c12',
    'processing': '#3498db',
    'approved': '#27ae60',
    'rejected': '#e74c3c',
    'cancelled': '#95a5a6'
  };

  useEffect(() => {
    fetchRequests();
    fetchStats();
    fetchUsers();
  }, [filters]);

  const fetchRequests = async () => {
    try {
      setLoading(true);
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value);
      });
      
      const response = await apiService.request(`/api/requests?${params}`);
      
      if (response.data.success) {
        setRequests(response.data.data);
      }
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch request:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l·∫•y danh s√°ch request');
    } finally {
      setLoading(false);
    }
  };

  const fetchStats = async () => {
    try {
      const params = new URLSearchParams();
      
      Object.entries(filters).forEach(([key, value]) => {
        if (value) params.append(key, value);
      });
      
      const response = await apiService.request(`/api/requests/stats/overview?${params}`);
      
      if (response.data.success) {
        setStats(response.data.data);
      }
    } catch (error) {
      console.error('L·ªói l·∫•y th·ªëng k√™:', error);
    }
  };

  const fetchUsers = async () => {
    try {
      const response = await apiService.request('/api/users');
      if (response.data.success) {
        setUsers(response.data.data);
      }
    } catch (error) {
      console.error('L·ªói l·∫•y danh s√°ch user:', error);
    }
  };

  const handleStatusUpdate = async (requestId, newStatus, note = '') => {
    try {
      setProcessingRequest(requestId);
      
      const response = await apiService.request(`/api/requests/${requestId}/status`, {
        method: 'PATCH',
        body: JSON.stringify({
          status: newStatus,
          note
        })
      });
      
      if (response.data.success) {
        // C·∫≠p nh·∫≠t request trong danh s√°ch
        setRequests(prev => prev.map(req => 
          req._id === requestId ? response.data.data : req
        ));
        
        // C·∫≠p nh·∫≠t th·ªëng k√™
        fetchStats();
        
        alert(`ƒê√£ ${newStatus === 'approved' ? 'duy·ªát' : 't·ª´ ch·ªëi'} request th√†nh c√¥ng`);
        setSelectedRequest(null);
      }
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
      alert(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');
    } finally {
      setProcessingRequest(null);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getMetadataDisplay = (request) => {
    const { metadata, request_type } = request;
    
    switch (request_type) {
      case 'monthly_off':
        return `${formatDate(metadata.from_date)} - ${formatDate(metadata.to_date)}`;
      case 'half_day_off':
        const shiftLabel = metadata.half_day_shift === 'morning' ? 'Ca s√°ng' : 'Ca chi·ªÅu';
        return `${formatDate(metadata.from_date)} (${shiftLabel})`;
      case 'annual_leave':
        return `${formatDate(metadata.from_date)} - ${formatDate(metadata.to_date)} (${metadata.leave_days} ng√†y)`;
      default:
        return '';
    }
  };

  const clearFilters = () => {
    setFilters({
      status: '',
      request_type: '',
      user_id: '',
      date_from: '',
      date_to: ''
    });
  };

  const getStatusCount = (status) => {
    const statusData = stats.find(s => s._id === status);
    return statusData ? statusData.total : 0;
  };

  if (loading) {
    return (
      <div className="admin-request-container">
        <div className="loading">ƒêang t·∫£i...</div>
      </div>
    );
  }

  return (
    <div className="admin-request-container">
      <div className="admin-request-header">
        <h2>Qu·∫£n L√Ω Y√™u C·∫ßu</h2>
        <div className="header-actions">
          <button className="btn-refresh" onClick={fetchRequests}>
            üîÑ L√†m m·ªõi
          </button>
        </div>
      </div>

      {/* Statistics */}
      <div className="stats-section">
        <div className="stats-grid">
          <div className="stat-card pending">
            <div className="stat-number">{getStatusCount('pending')}</div>
            <div className="stat-label">Ch·ªù duy·ªát</div>
          </div>
          <div className="stat-card processing">
            <div className="stat-number">{getStatusCount('processing')}</div>
            <div className="stat-label">ƒêang x·ª≠ l√Ω</div>
          </div>
          <div className="stat-card approved">
            <div className="stat-number">{getStatusCount('approved')}</div>
            <div className="stat-label">ƒê√£ duy·ªát</div>
          </div>
          <div className="stat-card rejected">
            <div className="stat-number">{getStatusCount('rejected')}</div>
            <div className="stat-label">T·ª´ ch·ªëi</div>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="filter-row">
          <div className="filter-group">
            <label>Tr·∫°ng th√°i:</label>
            <select
              value={filters.status}
              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
            >
              <option value="">T·∫•t c·∫£</option>
              <option value="pending">Ch·ªù duy·ªát</option>
              <option value="processing">ƒêang x·ª≠ l√Ω</option>
              <option value="approved">ƒê√£ duy·ªát</option>
              <option value="rejected">T·ª´ ch·ªëi</option>
              <option value="cancelled">ƒê√£ h·ªßy</option>
            </select>
          </div>

          <div className="filter-group">
            <label>Lo·∫°i y√™u c·∫ßu:</label>
            <select
              value={filters.request_type}
              onChange={(e) => setFilters(prev => ({ ...prev, request_type: e.target.value }))}
            >
              <option value="">T·∫•t c·∫£</option>
                             <option value="monthly_off">L·ªãch OFF th√°ng</option>
               <option value="half_day_off">L·ªãch OFF n·ª≠a ca</option>
               <option value="annual_leave">L·ªãch ngh·ªâ ph√©p nƒÉm</option>
            </select>
          </div>

          <div className="filter-group">
            <label>Ng∆∞·ªùi d√πng:</label>
            <select
              value={filters.user_id}
              onChange={(e) => setFilters(prev => ({ ...prev, user_id: e.target.value }))}
            >
              <option value="">T·∫•t c·∫£</option>
              {users.map(user => (
                <option key={user._id} value={user._id}>
                  {user.username} ({user.group_name})
                </option>
              ))}
            </select>
          </div>
        </div>

        <div className="filter-row">
          <div className="filter-group">
            <label>T·ª´ ng√†y:</label>
            <input
              type="date"
              value={filters.date_from}
              onChange={(e) => setFilters(prev => ({ ...prev, date_from: e.target.value }))}
            />
          </div>

          <div className="filter-group">
            <label>ƒê·∫øn ng√†y:</label>
            <input
              type="date"
              value={filters.date_to}
              onChange={(e) => setFilters(prev => ({ ...prev, date_to: e.target.value }))}
            />
          </div>

          <button className="btn-clear-filters" onClick={clearFilters}>
            X√≥a b·ªô l·ªçc
          </button>
        </div>
      </div>

      {/* Requests Table */}
      <div className="requests-table-container">
        <table className="requests-table">
          <thead>
            <tr>
              <th>Ng∆∞·ªùi d√πng</th>
              <th>Lo·∫°i y√™u c·∫ßu</th>
              <th>Ti√™u ƒë·ªÅ</th>
              <th>Th√¥ng tin</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Ng√†y t·∫°o</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {requests.map((request) => (
              <tr key={request._id} className="request-row">
                <td>
                  <div className="user-info">
                    <div className="username">{request.user?.username}</div>
                    <div className="group-name">{request.user?.group_name}</div>
                  </div>
                </td>
                <td>
                  <span className="request-type-badge">
                    {requestTypes[request.request_type]}
                  </span>
                </td>
                <td>
                  <div className="request-title-cell">
                    {request.content}
                  </div>
                </td>
                <td>
                  <div className="metadata-cell">
                    {getMetadataDisplay(request)}
                  </div>
                </td>
                <td>
                  <span 
                    className="status-badge"
                    style={{ backgroundColor: statusColors[request.status] }}
                  >
                    {statusLabels[request.status]}
                  </span>
                </td>
                <td>{formatDate(request.created_at)}</td>
                <td>
                  <div className="action-buttons">
                    <button
                      className="btn-view"
                      onClick={() => setSelectedRequest(request)}
                    >
                      üëÅÔ∏è Xem
                    </button>
                    
                    {request.status === 'pending' && (
                      <>
                        <button
                          className="btn-approve"
                          onClick={() => handleStatusUpdate(request._id, 'approved')}
                          disabled={processingRequest === request._id}
                        >
                          {processingRequest === request._id ? '‚è≥' : '‚úÖ'} Duy·ªát
                        </button>
                        
                        <button
                          className="btn-reject"
                          onClick={() => {
                            const note = prompt('Nh·∫≠p l√Ω do t·ª´ ch·ªëi (n·∫øu c√≥):');
                            if (note !== null) {
                              handleStatusUpdate(request._id, 'rejected', note);
                            }
                          }}
                          disabled={processingRequest === request._id}
                        >
                          {processingRequest === request._id ? '‚è≥' : '‚ùå'} T·ª´ ch·ªëi
                        </button>
                      </>
                    )}
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Request Detail Modal */}
      {selectedRequest && (
        <div className="request-detail-overlay" onClick={() => setSelectedRequest(null)}>
          <div className="request-detail-container" onClick={(e) => e.stopPropagation()}>
            <div className="request-detail-header">
              <h3>Chi Ti·∫øt Y√™u C·∫ßu</h3>
              <button 
                className="close-btn"
                onClick={() => setSelectedRequest(null)}
              >
                √ó
              </button>
            </div>
            
            <div className="request-detail-content">
              <div className="detail-row">
                <label>Ng∆∞·ªùi d√πng:</label>
                <span>{selectedRequest.user?.username} ({selectedRequest.user?.group_name})</span>
              </div>
              
              <div className="detail-row">
                <label>Lo·∫°i y√™u c·∫ßu:</label>
                <span>{requestTypes[selectedRequest.request_type]}</span>
              </div>
              
              <div className="detail-row">
                <label>Ti√™u ƒë·ªÅ:</label>
                <span>{selectedRequest.content}</span>
              </div>
              
              <div className="detail-row">
                <label>M√¥ t·∫£:</label>
                <span>{selectedRequest.description}</span>
              </div>
              
              <div className="detail-row">
                <label>Tr·∫°ng th√°i:</label>
                <span 
                  className="status-badge"
                  style={{ backgroundColor: statusColors[selectedRequest.status] }}
                >
                  {statusLabels[selectedRequest.status]}
                </span>
              </div>
              
              <div className="detail-row">
                <label>Ng√†y t·∫°o:</label>
                <span>{formatDate(selectedRequest.created_at)}</span>
              </div>
              
              {selectedRequest.processed_by && (
                <div className="detail-row">
                  <label>X·ª≠ l√Ω b·ªüi:</label>
                  <span>{selectedRequest.processed_by.username}</span>
                </div>
              )}
              
              {selectedRequest.processed_at && (
                <div className="detail-row">
                  <label>Ng√†y x·ª≠ l√Ω:</label>
                  <span>{formatDate(selectedRequest.processed_at)}</span>
                </div>
              )}
              
              {selectedRequest.admin_note && (
                <div className="detail-row">
                  <label>Ghi ch√∫ t·ª´ admin:</label>
                  <span>{selectedRequest.admin_note}</span>
                </div>
              )}
            </div>
            
            {selectedRequest.status === 'pending' && (
              <div className="request-detail-actions">
                <button
                  className="btn-approve-large"
                  onClick={() => handleStatusUpdate(selectedRequest._id, 'approved')}
                  disabled={processingRequest === selectedRequest._id}
                >
                  {processingRequest === selectedRequest._id ? '‚è≥ ƒêang x·ª≠ l√Ω...' : '‚úÖ Duy·ªát y√™u c·∫ßu'}
                </button>
                
                <button
                  className="btn-reject-large"
                  onClick={() => {
                    const note = prompt('Nh·∫≠p l√Ω do t·ª´ ch·ªëi (n·∫øu c√≥):');
                    if (note !== null) {
                      handleStatusUpdate(selectedRequest._id, 'rejected', note);
                    }
                  }}
                  disabled={processingRequest === selectedRequest._id}
                >
                  ‚ùå T·ª´ ch·ªëi y√™u c·∫ßu
                </button>
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminRequestManager;
