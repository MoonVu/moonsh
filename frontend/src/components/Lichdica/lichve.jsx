import React, { useState, useEffect } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useCan } from '../../hooks/useCan';
import apiService from '../../services/api';
import './LichVe.css';

const LichVe = () => {
  const { user } = useAuth();
  
  // State cho d·ªØ li·ªáu
  const [leaveData, setLeaveData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [editingItem, setEditingItem] = useState(null);
  const [users, setUsers] = useState([]);
  const [showUserDropdown, setShowUserDropdown] = useState(false);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [activeDropdown, setActiveDropdown] = useState(null);
  const [formData, setFormData] = useState({
    department: '',
    employeeName: '',
    nextLeaveDate: '',
    leaveStartDate: '',
    leaveEndDate: '',
    returnDate: '',
    leaveDays: 0,
    leaveType: 'Vi·ªác ri√™ng',
    arrangementType: 'T·ªï tr∆∞·ªüng x·∫øp',
    notes: ''
  });

  // Ki·ªÉm tra quy·ªÅn - t·∫°m th·ªùi ƒë·ªÉ true ƒë·ªÉ test
  const canEdit = true; // useCan('leave-schedule', 'edit');
  const canView = true; // useCan('leave-schedule', 'view');

  // H√†m t√≠nh s·ªë ng√†y ngh·ªâ ph√©p v√† c√°c ng√†y li√™n quan
  const calculateLeaveDays = (startDate, endDate, leaveType) => {
    if (!startDate) return 0;
    
    if (leaveType === 'Ph√©p 6 th√°ng') {
      return 17; // Ph√©p 6 th√°ng lu√¥n l√† 17 ng√†y
    }
    
    if (!endDate) return 0;
    
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diffTime = Math.abs(end - start);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
    return diffDays;
  };

  // H√†m t√≠nh tr·∫°ng th√°i d·ª±a tr√™n ng√†y hi·ªán t·∫°i
  const calculateStatus = (leaveStartDate, leaveEndDate, returnDate) => {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Reset time ƒë·ªÉ so s√°nh ch·ªâ ng√†y
    
    const leaveStart = new Date(leaveStartDate);
    leaveStart.setHours(0, 0, 0, 0);
    
    const leaveEnd = new Date(leaveEndDate);
    leaveEnd.setHours(0, 0, 0, 0);
    
    const returnDateObj = new Date(returnDate);
    returnDateObj.setHours(0, 0, 0, 0);
    
    // N·∫øu h√¥m nay sau ng√†y quay l·∫°i l√†m vi·ªác
    if (today.getTime() > returnDateObj.getTime()) {
      return { text: "Ho√†n th√†nh ngh·ªâ ph√©p", class: "completed" };
    }
    
    // N·∫øu h√¥m nay trong kho·∫£ng th·ªùi gian ngh·ªâ ph√©p (t·ª´ ng√†y b·∫Øt ƒë·∫ßu ƒë·∫øn ng√†y k·∫øt th√∫c)
    if (today.getTime() >= leaveStart.getTime() && today.getTime() <= leaveEnd.getTime()) {
      const diffTime = leaveEnd.getTime() - today.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;
      return { text: `Trong k√¨ ngh·ªâ ph√©p - C√≤n ${diffDays} ng√†y`, class: "in-leave" };
    }
    
    // N·∫øu h√¥m nay tr∆∞·ªõc ng√†y b·∫Øt ƒë·∫ßu ngh·ªâ ph√©p
    if (today.getTime() < leaveStart.getTime()) {
      const diffTime = leaveStart.getTime() - today.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      return { text: `ƒê·ª£i ng√†y v·ªÅ ph√©p - C√≤n ${diffDays} ng√†y`, class: "waiting" };
    }
    
    // Fallback
    return { text: "ƒê·ª£i ng√†y v·ªÅ ph√©p", class: "waiting" };
  };

  // H√†m t√≠nh ng√†y k·∫øt th√∫c v√† ng√†y quay l·∫°i cho ph√©p 6 th√°ng
  const calculate6MonthLeaveDates = (startDate) => {
    if (!startDate) return { endDate: '', returnDate: '' };
    
    const start = new Date(startDate);
    const end = new Date(start);
    end.setDate(start.getDate() + 16); // 16 ng√†y sau (t·ªïng 17 ng√†y)
    
    const returnDate = new Date(end);
    returnDate.setDate(end.getDate() + 1); // Ng√†y quay l·∫°i = ng√†y k·∫øt th√∫c + 1
    
    return {
      endDate: end.toISOString().split('T')[0],
      returnDate: returnDate.toISOString().split('T')[0]
    };
  };

  // H√†m l·∫•y danh s√°ch users t·ª´ backend
  const fetchUsers = async () => {
    try {
      const response = await apiService.getUsers();
      console.log('üîç fetchUsers response:', response);
      const usersArray = Array.isArray(response) ? response : (response?.data || []);
      console.log('üîç usersArray:', usersArray);
      if (usersArray.length > 0) {
        console.log('üîç First user structure:', usersArray[0]);
      }
      setUsers(usersArray);
    } catch (err) {
      console.error('Error fetching users:', err);
    }
  };

  // H√†m c·∫≠p nh·∫≠t form data v√† t√≠nh to√°n s·ªë ng√†y
  const updateFormData = (updates) => {
    const newFormData = { ...formData, ...updates };
    
    // X·ª≠ l√Ω ph√©p 6 th√°ng - ch·ªâ ch·ªçn ng√†y b·∫Øt ƒë·∫ßu
    if (updates.leaveType === 'Ph√©p 6 th√°ng' || (updates.leaveStartDate && newFormData.leaveType === 'Ph√©p 6 th√°ng')) {
      const dates = calculate6MonthLeaveDates(updates.leaveStartDate || newFormData.leaveStartDate);
      newFormData.leaveEndDate = dates.endDate;
      newFormData.returnDate = dates.returnDate;
      newFormData.leaveDays = 17;
    }
    // X·ª≠ l√Ω vi·ªác ri√™ng - ch·ªçn c·∫£ ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c
    else if (updates.leaveType === 'Vi·ªác ri√™ng' || (updates.leaveStartDate && newFormData.leaveType === 'Vi·ªác ri√™ng') || (updates.leaveEndDate && newFormData.leaveType === 'Vi·ªác ri√™ng')) {
      // T√≠nh ng√†y quay l·∫°i = ng√†y k·∫øt th√∫c + 1
      if (updates.leaveEndDate || newFormData.leaveEndDate) {
        const endDate = new Date(updates.leaveEndDate || newFormData.leaveEndDate);
        const returnDate = new Date(endDate);
        returnDate.setDate(endDate.getDate() + 1);
        newFormData.returnDate = returnDate.toISOString().split('T')[0];
      }
      
      // T√≠nh s·ªë ng√†y ngh·ªâ ph√©p
      newFormData.leaveDays = calculateLeaveDays(
        updates.leaveStartDate || newFormData.leaveStartDate,
        updates.leaveEndDate || newFormData.leaveEndDate,
        'Vi·ªác ri√™ng'
      );
    }
    
    setFormData(newFormData);
  };

  // H√†m filter users khi g√µ
  const filterUsers = (searchTerm) => {
    if (!searchTerm) {
      setFilteredUsers(users);
    } else {
      const filtered = users.filter(user => 
        user.username.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredUsers(filtered);
    }
  };

  useEffect(() => {
    // T·∫°m th·ªùi b·ªè qua ki·ªÉm tra quy·ªÅn ƒë·ªÉ test
    fetchLeaveData();
    fetchUsers();
  }, []);

  useEffect(() => {
    setFilteredUsers(users);
  }, [users]);

  useEffect(() => {
    document.addEventListener('click', handleClickOutside);
    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  }, []);

  const fetchLeaveData = async () => {
    setLoading(true);
    try {
      const response = await apiService.request('/leave-schedule');
      if (response.success) {
        setLeaveData(response.data);
      } else {
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch v·ªÅ ph√©p');
      }
    } catch (err) {
      console.error('Error fetching leave data:', err);
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu l·ªãch v·ªÅ ph√©p');
    } finally {
      setLoading(false);
    }
  };

  // H√†m m·ªü form ch·ªânh s·ª≠a
  const handleEditItem = (item) => {
    setEditingItem(item);
    setFormData({
      department: item.department || '',
      employeeName: item.employeeName || '',
      nextLeaveDate: item.nextLeaveDate ? new Date(item.nextLeaveDate).toISOString().split('T')[0] : '',
      leaveStartDate: item.leaveStartDate ? new Date(item.leaveStartDate).toISOString().split('T')[0] : '',
      leaveEndDate: item.leaveEndDate ? new Date(item.leaveEndDate).toISOString().split('T')[0] : '',
      returnDate: item.returnDate ? new Date(item.returnDate).toISOString().split('T')[0] : '',
      leaveDays: item.leaveDays || 0,
      leaveType: item.leaveType || 'Vi·ªác ri√™ng',
      arrangementType: item.arrangementType || 'T·ªï tr∆∞·ªüng x·∫øp',
      notes: item.notes || ''
    });
    setShowEditForm(true);
  };

  // H√†m ƒë√≥ng form ch·ªânh s·ª≠a
  const handleCloseEditForm = () => {
    setShowEditForm(false);
    setEditingItem(null);
    setFormData({
      department: '',
      employeeName: '',
      nextLeaveDate: '',
      leaveStartDate: '',
      leaveEndDate: '',
      returnDate: '',
      leaveDays: 0,
      leaveType: 'Vi·ªác ri√™ng',
      arrangementType: 'T·ªï tr∆∞·ªüng x·∫øp',
      notes: ''
    });
  };

  const handleSubmitForm = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // ƒê·∫£m b·∫£o leaveDays ƒë∆∞·ª£c t√≠nh to√°n tr∆∞·ªõc khi g·ª≠i
      const calculatedLeaveDays = calculateLeaveDays(
        formData.leaveStartDate,
        formData.leaveEndDate,
        formData.leaveType
      );
      
      const submitData = {
        ...formData,
        leaveDays: calculatedLeaveDays, // ƒê·∫£m b·∫£o c√≥ leaveDays
        status: 'ƒê·ª£i ng√†y v·ªÅ ph√©p'
      };
      
      console.log('üì§ Submitting leave schedule data:', submitData);
      
      const response = await apiService.request('/leave-schedule', {
        method: 'POST',
        body: JSON.stringify(submitData)
      });
      if (response.success) {
        // ƒê√≥ng form v√† reset d·ªØ li·ªáu
        setShowAddForm(false);
        setFormData({
          department: '',
          employeeName: '',
          nextLeaveDate: '',
          leaveStartDate: '',
          leaveEndDate: '',
          returnDate: '',
          leaveDays: 0,
          leaveType: 'Vi·ªác ri√™ng',
          arrangementType: 'T·ªï tr∆∞·ªüng x·∫øp',
          notes: ''
        });
        
        // T·∫£i l·∫°i d·ªØ li·ªáu
        await fetchLeaveData();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        alert('Th√™m l·ªãch v·ªÅ ph√©p th√†nh c√¥ng!');
      } else {
        alert('C√≥ l·ªói x·∫£y ra: ' + response.message);
      }
    } catch (err) {
      console.error('Error creating leave schedule:', err);
      alert('C√≥ l·ªói x·∫£y ra khi t·∫°o l·ªãch v·ªÅ ph√©p');
    } finally {
      setLoading(false);
    }
  };

  // H√†m c·∫≠p nh·∫≠t l·ªãch v·ªÅ ph√©p
  const handleUpdateForm = async (e) => {
    e.preventDefault();
    setLoading(true);
    
    try {
      // ƒê·∫£m b·∫£o leaveDays ƒë∆∞·ª£c t√≠nh to√°n tr∆∞·ªõc khi g·ª≠i
      const calculatedLeaveDays = calculateLeaveDays(
        formData.leaveStartDate,
        formData.leaveEndDate,
        formData.leaveType
      );
      
      const updateData = {
        ...formData,
        leaveDays: calculatedLeaveDays
      };
      
      console.log('üì§ Updating leave schedule data:', updateData);
      
      const response = await apiService.request(`/leave-schedule/${editingItem._id}`, {
        method: 'PUT',
        body: JSON.stringify(updateData)
      });
      
      if (response.success) {
        // ƒê√≥ng form v√† reset d·ªØ li·ªáu
        handleCloseEditForm();
        
        // T·∫£i l·∫°i d·ªØ li·ªáu
        await fetchLeaveData();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        alert('C·∫≠p nh·∫≠t l·ªãch v·ªÅ ph√©p th√†nh c√¥ng!');
      } else {
        alert('C√≥ l·ªói x·∫£y ra: ' + response.message);
      }
    } catch (err) {
      console.error('Error updating leave schedule:', err);
      alert('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t l·ªãch v·ªÅ ph√©p');
    } finally {
      setLoading(false);
    }
  };

  // H√†m x√≥a l·ªãch v·ªÅ ph√©p
  const handleDeleteItem = async (item) => {
    const confirmDelete = window.confirm(
      `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch v·ªÅ ph√©p c·ªßa ${item.employeeName}?\n\n` +
      `Ng√†y ngh·ªâ: ${new Date(item.leaveStartDate).toLocaleDateString('vi-VN')} - ${new Date(item.leaveEndDate).toLocaleDateString('vi-VN')}\n` +
      `Lo·∫°i ph√©p: ${item.leaveType}\n\n` +
      `H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!`
    );
    
    if (!confirmDelete) return;
    
    setLoading(true);
    
    try {
      console.log('üóëÔ∏è Deleting leave schedule:', item._id);
      
      const response = await apiService.request(`/leave-schedule/${item._id}`, {
        method: 'DELETE'
      });
      
      if (response.success) {
        // ƒê√≥ng dropdown n·∫øu ƒëang m·ªü
        setActiveDropdown(null);
        
        // T·∫£i l·∫°i d·ªØ li·ªáu
        await fetchLeaveData();
        
        // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        alert('X√≥a l·ªãch v·ªÅ ph√©p th√†nh c√¥ng!');
      } else {
        alert('C√≥ l·ªói x·∫£y ra: ' + response.message);
      }
    } catch (err) {
      console.error('Error deleting leave schedule:', err);
      alert('C√≥ l·ªói x·∫£y ra khi x√≥a l·ªãch v·ªÅ ph√©p');
    } finally {
      setLoading(false);
    }
  };

  // H√†m toggle dropdown
  const toggleDropdown = (itemId) => {
    setActiveDropdown(activeDropdown === itemId ? null : itemId);
  };

  // H√†m ƒë√≥ng dropdown khi click outside
  const handleClickOutside = (e) => {
    if (!e.target.closest('.action-buttons')) {
      setActiveDropdown(null);
    }
  };

  if (!canView) {
    return (
      <div className="lichve-container">
        <div className="access-denied">
          <h2>Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p</h2>
          <p>B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch v·ªÅ ph√©p.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="lichve-container">
      <h1 className="lichve-title">L·ªãch V·ªÅ Ph√©p</h1>
      
      {/* Div th·ªëng k√™ c·∫£nh b√°o - ƒë·ªÉ tr·ªëng theo y√™u c·∫ßu */}
      <div className="warning-stats">
        {/* N·ªôi dung s·∫Ω ƒë∆∞·ª£c th√™m sau */}
      </div>

      {/* B·∫£ng th·ªëng k√™ l·ªãch v·ªÅ ph√©p */}
      <div className="table-container">
        {/* N√∫t th√™m m·ªõi - ch·ªâ admin, n·∫±m tr√™n b·∫£ng */}
        {canEdit && (
          <div className="table-actions-top">
            <button 
              className="btn-add-small"
              onClick={() => setShowAddForm(true)}
            >
              + Th√™m m·ªõi
            </button>
          </div>
        )}
        
        <table className="lichve-table">
          <thead>
            <tr>
              <th>STT</th>
              <th>B·ªô ph·∫≠n</th>
              <th>T√™n nh√¢n vi√™n</th>
              <th>Ng√†y ƒë·ªß ph√©p theo OA</th>
              <th>Ng√†y ngh·ªâ ph√©p</th>
              <th>Ng√†y quay l·∫°i l√†m vi·ªác</th>
              <th>S·ªë ng√†y ngh·ªâ ph√©p</th>
              <th>Lo·∫°i ph√©p</th>
              <th>Tr·∫°ng th√°i</th>
              <th>Lo·∫°i h√¨nh s·∫Øp x·∫øp</th>
              <th>Ghi ch√∫</th>
              <th>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {loading ? (
              <tr>
                <td colSpan="12" className="loading-row">
                  ƒêang t·∫£i d·ªØ li·ªáu...
                </td>
              </tr>
            ) : error ? (
              <tr>
                <td colSpan="12" className="error-row">
                  {error}
                </td>
              </tr>
            ) : leaveData.length === 0 ? (
              <tr>
                <td colSpan="12" className="empty-row">
                  Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch v·ªÅ ph√©p
                </td>
              </tr>
            ) : (
              leaveData.map((item, index) => (
                <tr key={item._id || index}>
                  <td>{index + 1}</td>
                  <td>{item.department}</td>
                  <td>{item.employeeName}</td>
                  <td>{item.formattedNextLeaveDate || new Date(item.nextLeaveDate).toLocaleDateString('vi-VN')}</td>
                  <td>{item.leavePeriod || `${new Date(item.leaveStartDate).toLocaleDateString('vi-VN')} - ${new Date(item.leaveEndDate).toLocaleDateString('vi-VN')}`}</td>
                  <td>{item.formattedReturnDate || new Date(item.returnDate).toLocaleDateString('vi-VN')}</td>
                  <td>{item.leaveDays}</td>
                  <td>{item.leaveType}</td>
                  <td>
                    {(() => {
                      const status = calculateStatus(item.leaveStartDate, item.leaveEndDate, item.returnDate);
                      return (
                        <span className={`status-badge status-${status.class}`}>
                          {status.text}
                        </span>
                      );
                    })()}
                  </td>
                  <td>{item.arrangementType}</td>
                  <td>{item.notes || '-'}</td>
                  <td>
                    {canEdit && (
                      <div className="action-buttons">
                        <button 
                          className="action-menu-trigger"
                          onClick={() => toggleDropdown(item._id)}
                          title="Thao t√°c"
                        >
                          ‚ãÆ
                        </button>
                        {activeDropdown === item._id && (
                          <div className="action-dropdown">
                            <div 
                              className="action-dropdown-item edit"
                              onClick={() => {
                                handleEditItem(item);
                                setActiveDropdown(null);
                              }}
                            >
                              ‚úèÔ∏è Ch·ªânh s·ª≠a
                            </div>
                            <div 
                              className="action-dropdown-item delete"
                              onClick={() => {
                                handleDeleteItem(item);
                                setActiveDropdown(null);
                              }}
                            >
                              üóëÔ∏è X√≥a
                            </div>
                          </div>
                        )}
                      </div>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Form th√™m m·ªõi */}
      {showAddForm && (
        <div className="add-form-overlay">
          <div className="add-form">
            <h3>Th√™m m·ªõi l·ªãch v·ªÅ ph√©p</h3>
            <form onSubmit={handleSubmitForm}>
              <div className="form-row">
                <div className="form-group">
                  <label>T√™n nh√¢n vi√™n:</label>
                  <div style={{position: 'relative'}}>
                    <input
                      type="text"
                      value={formData.employeeName}
                      onChange={(e) => {
                        const value = e.target.value;
                        updateFormData({employeeName: value});
                        filterUsers(value);
                        setShowUserDropdown(true);
                      }}
                      onFocus={() => {
                        setShowUserDropdown(true);
                        filterUsers(formData.employeeName);
                      }}
                      onBlur={() => {
                        // Delay ƒë·ªÉ cho ph√©p click v√†o dropdown
                        setTimeout(() => setShowUserDropdown(false), 200);
                      }}
                      placeholder="G√µ t√™n nh√¢n vi√™n..."
                      required
                      style={{width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc'}}
                    />
                    {showUserDropdown && filteredUsers.length > 0 && (
                      <div style={{
                        position: 'absolute',
                        top: '100%',
                        left: 0,
                        right: 0,
                        backgroundColor: 'white',
                        border: '1px solid #ccc',
                        borderTop: 'none',
                        borderRadius: '0 0 4px 4px',
                        maxHeight: '200px',
                        overflowY: 'auto',
                        zIndex: 1000
                      }}>
                        {filteredUsers.map(user => (
                          <div
                            key={user._id}
                            onClick={() => {
                              updateFormData({
                                employeeName: user.username,
                                department: user.group_name || ''
                              });
                              setShowUserDropdown(false);
                            }}
                            style={{
                              padding: '8px',
                              cursor: 'pointer',
                              borderBottom: '1px solid #eee'
                            }}
                            onMouseEnter={(e) => {
                              e.target.style.backgroundColor = '#f5f5f5';
                            }}
                            onMouseLeave={(e) => {
                              e.target.style.backgroundColor = 'white';
                            }}
                          >
                            {user.username}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (C√≥ th·ªÉ g√µ ƒë·ªÉ t√¨m ki·∫øm nhanh)
                  </small>
                </div>
                <div className="form-group">
                  <label>B·ªô ph·∫≠n:</label>
                  <input
                    type="text"
                    value={formData.department}
                    readOnly
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (T·ª± ƒë·ªông l·∫•y t·ª´ nh√¢n vi√™n ƒë√£ ch·ªçn)
                  </small>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y ƒë·ªß ph√©p:</label>
                  <input
                    type="date"
                    value={formData.nextLeaveDate}
                    onChange={(e) => updateFormData({nextLeaveDate: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i ph√©p:</label>
                  <select
                    value={formData.leaveType}
                    onChange={(e) => updateFormData({leaveType: e.target.value})}
                    required
                  >
                    <option value="Vi·ªác ri√™ng">Vi·ªác ri√™ng</option>
                    <option value="Ph√©p 6 th√°ng">Ph√©p 6 th√°ng</option>
                  </select>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y b·∫Øt ƒë·∫ßu ngh·ªâ ph√©p:</label>
                  <input
                    type="date"
                    value={formData.leaveStartDate}
                    onChange={(e) => updateFormData({leaveStartDate: e.target.value})}
                    required
                    style={{width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc'}}
                  />
                </div>
                <div className="form-group">
                  <label>Ng√†y k·∫øt th√∫c ngh·ªâ ph√©p:</label>
                  <input
                    type="date"
                    value={formData.leaveEndDate}
                    onChange={(e) => updateFormData({leaveEndDate: e.target.value})}
                    required={formData.leaveType === 'Vi·ªác ri√™ng'}
                    disabled={formData.leaveType === 'Ph√©p 6 th√°ng'}
                    style={{
                      width: '100%', 
                      padding: '8px', 
                      borderRadius: '4px', 
                      border: '1px solid #ccc',
                      backgroundColor: formData.leaveType === 'Ph√©p 6 th√°ng' ? '#f5f5f5' : 'white',
                      color: formData.leaveType === 'Ph√©p 6 th√°ng' ? '#666' : 'black'
                    }}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    {formData.leaveType === 'Ph√©p 6 th√°ng' 
                      ? '(T·ª± ƒë·ªông t√≠nh: 16 ng√†y sau ng√†y b·∫Øt ƒë·∫ßu)' 
                      : '(Ch·ªçn ng√†y k·∫øt th√∫c cho ph√©p vi·ªác ri√™ng)'}
                  </small>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y quay l·∫°i l√†m vi·ªác:</label>
                  <input
                    type="date"
                    value={formData.returnDate}
                    readOnly
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (T·ª± ƒë·ªông t√≠nh: ng√†y k·∫øt th√∫c + 1 ng√†y)
                  </small>
                </div>
                <div className="form-group">
                  <label>S·ªë ng√†y ngh·ªâ ph√©p:</label>
                  <input
                    type="number"
                    value={formData.leaveDays}
                    readOnly
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (T·ª± ƒë·ªông t√≠nh to√°n d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c)
                  </small>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Lo·∫°i h√¨nh s·∫Øp x·∫øp:</label>
                  <select
                    value={formData.arrangementType}
                    onChange={(e) => updateFormData({arrangementType: e.target.value})}
                    required
                  >
                    <option value="T·ªï tr∆∞·ªüng x·∫øp">T·ªï tr∆∞·ªüng x·∫øp</option>
                    <option value="Theo l·ªãch OA">Theo l·ªãch OA</option>
                    <option value="Nh√¢n vi√™n d·ªùi ng√†y">Nh√¢n vi√™n d·ªùi ng√†y</option>
                    <option value="Nh√¢n vi√™n xin l·ªãch">Nh√¢n vi√™n xin l·ªãch</option>
                    <option value="Tr·ª£ l√Ω x·∫øp">Tr·ª£ l√Ω x·∫øp</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Tr·∫°ng th√°i:</label>
                  <select
                    value="ƒê·ª£i ng√†y v·ªÅ ph√©p"
                    disabled
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  >
                    <option value="ƒê·ª£i ng√†y v·ªÅ ph√©p">ƒê·ª£i ng√†y v·ªÅ ph√©p</option>
                  </select>
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (M·∫∑c ƒë·ªãnh khi t·∫°o m·ªõi)
                  </small>
                </div>
              </div>
              
              <div className="form-group">
                <label>Ghi ch√∫:</label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => updateFormData({notes: e.target.value})}
                  rows="3"
                />
              </div>
              
              <div className="form-actions">
                <button type="submit" className="btn-submit">L∆∞u</button>
                <button type="button" className="btn-cancel" onClick={() => setShowAddForm(false)}>
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Form ch·ªânh s·ª≠a */}
      {showEditForm && (
        <div className="add-form-overlay">
          <div className="add-form">
            <h3>Ch·ªânh s·ª≠a l·ªãch v·ªÅ ph√©p</h3>
            <form onSubmit={handleUpdateForm}>
              <div className="form-row">
                <div className="form-group">
                  <label>T√™n nh√¢n vi√™n:</label>
                  <div style={{position: 'relative'}}>
                    <input
                      type="text"
                      value={formData.employeeName}
                      onChange={(e) => {
                        const value = e.target.value;
                        updateFormData({employeeName: value});
                        filterUsers(value);
                        setShowUserDropdown(true);
                      }}
                      onFocus={() => {
                        setShowUserDropdown(true);
                        filterUsers(formData.employeeName);
                      }}
                      onBlur={() => {
                        // Delay ƒë·ªÉ cho ph√©p click v√†o dropdown
                        setTimeout(() => setShowUserDropdown(false), 200);
                      }}
                      placeholder="G√µ t√™n nh√¢n vi√™n..."
                      required
                      style={{width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc'}}
                    />
                    {showUserDropdown && filteredUsers.length > 0 && (
                      <div style={{
                        position: 'absolute',
                        top: '100%',
                        left: 0,
                        right: 0,
                        backgroundColor: 'white',
                        border: '1px solid #ccc',
                        borderTop: 'none',
                        borderRadius: '0 0 4px 4px',
                        maxHeight: '200px',
                        overflowY: 'auto',
                        zIndex: 1000
                      }}>
                        {filteredUsers.map(user => (
                          <div
                            key={user._id}
                            onClick={() => {
                              updateFormData({
                                employeeName: user.username,
                                department: user.group_name || ''
                              });
                              setShowUserDropdown(false);
                            }}
                            style={{
                              padding: '8px',
                              cursor: 'pointer',
                              borderBottom: '1px solid #eee'
                            }}
                            onMouseEnter={(e) => {
                              e.target.style.backgroundColor = '#f5f5f5';
                            }}
                            onMouseLeave={(e) => {
                              e.target.style.backgroundColor = 'white';
                            }}
                          >
                            {user.username}
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (C√≥ th·ªÉ g√µ ƒë·ªÉ t√¨m ki·∫øm nhanh)
                  </small>
                </div>
                <div className="form-group">
                  <label>B·ªô ph·∫≠n:</label>
                  <input
                    type="text"
                    value={formData.department}
                    readOnly
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (T·ª± ƒë·ªông l·∫•y t·ª´ nh√¢n vi√™n ƒë√£ ch·ªçn)
                  </small>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y ƒë·ªß ph√©p:</label>
                  <input
                    type="date"
                    value={formData.nextLeaveDate}
                    onChange={(e) => updateFormData({nextLeaveDate: e.target.value})}
                    required
                  />
                </div>
                <div className="form-group">
                  <label>Lo·∫°i ph√©p:</label>
                  <select
                    value={formData.leaveType}
                    onChange={(e) => updateFormData({leaveType: e.target.value})}
                    required
                  >
                    <option value="Vi·ªác ri√™ng">Vi·ªác ri√™ng</option>
                    <option value="Ph√©p 6 th√°ng">Ph√©p 6 th√°ng</option>
                  </select>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y b·∫Øt ƒë·∫ßu ngh·ªâ ph√©p:</label>
                  <input
                    type="date"
                    value={formData.leaveStartDate}
                    onChange={(e) => updateFormData({leaveStartDate: e.target.value})}
                    required
                    style={{width: '100%', padding: '8px', borderRadius: '4px', border: '1px solid #ccc'}}
                  />
                </div>
                <div className="form-group">
                  <label>Ng√†y k·∫øt th√∫c ngh·ªâ ph√©p:</label>
                  <input
                    type="date"
                    value={formData.leaveEndDate}
                    onChange={(e) => updateFormData({leaveEndDate: e.target.value})}
                    required={formData.leaveType === 'Vi·ªác ri√™ng'}
                    disabled={formData.leaveType === 'Ph√©p 6 th√°ng'}
                    style={{
                      width: '100%', 
                      padding: '8px', 
                      borderRadius: '4px', 
                      border: '1px solid #ccc',
                      backgroundColor: formData.leaveType === 'Ph√©p 6 th√°ng' ? '#f5f5f5' : 'white',
                      color: formData.leaveType === 'Ph√©p 6 th√°ng' ? '#666' : 'black'
                    }}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    {formData.leaveType === 'Ph√©p 6 th√°ng' 
                      ? '(T·ª± ƒë·ªông t√≠nh: 16 ng√†y sau ng√†y b·∫Øt ƒë·∫ßu)' 
                      : '(Ch·ªçn ng√†y k·∫øt th√∫c cho ph√©p vi·ªác ri√™ng)'}
                  </small>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Ng√†y quay l·∫°i l√†m vi·ªác:</label>
                  <input
                    type="date"
                    value={formData.returnDate}
                    readOnly
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (T·ª± ƒë·ªông t√≠nh: ng√†y k·∫øt th√∫c + 1 ng√†y)
                  </small>
                </div>
                <div className="form-group">
                  <label>S·ªë ng√†y ngh·ªâ ph√©p:</label>
                  <input
                    type="number"
                    value={formData.leaveDays}
                    readOnly
                    className="readonly-field"
                    style={{backgroundColor: '#f5f5f5', color: '#666'}}
                  />
                  <small style={{color: '#666', fontSize: '12px'}}>
                    (T·ª± ƒë·ªông t√≠nh to√°n d·ª±a tr√™n ng√†y b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c)
                  </small>
                </div>
              </div>
              
              <div className="form-row">
                <div className="form-group">
                  <label>Lo·∫°i h√¨nh s·∫Øp x·∫øp:</label>
                  <select
                    value={formData.arrangementType}
                    onChange={(e) => updateFormData({arrangementType: e.target.value})}
                    required
                  >
                    <option value="T·ªï tr∆∞·ªüng x·∫øp">T·ªï tr∆∞·ªüng x·∫øp</option>
                    <option value="Theo l·ªãch OA">Theo l·ªãch OA</option>
                    <option value="Nh√¢n vi√™n d·ªùi ng√†y">Nh√¢n vi√™n d·ªùi ng√†y</option>
                    <option value="Nh√¢n vi√™n xin l·ªãch">Nh√¢n vi√™n xin l·ªãch</option>
                    <option value="Tr·ª£ l√Ω x·∫øp">Tr·ª£ l√Ω x·∫øp</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>Tr·∫°ng th√°i:</label>
                  <select
                    value={formData.status || 'ƒê·ª£i ng√†y v·ªÅ ph√©p'}
                    onChange={(e) => updateFormData({status: e.target.value})}
                    required
                  >
                    <option value="ƒê·ª£i ng√†y v·ªÅ ph√©p">ƒê·ª£i ng√†y v·ªÅ ph√©p</option>
                    <option value="ƒêang v·ªÅ ph√©p">ƒêang v·ªÅ ph√©p</option>
                    <option value="Ho√†n th√†nh ph√©p">Ho√†n th√†nh ph√©p</option>
                    <option value="H·ªßy ph√©p">H·ªßy ph√©p</option>
                  </select>
                </div>
              </div>
              
              <div className="form-group">
                <label>Ghi ch√∫:</label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => updateFormData({notes: e.target.value})}
                  rows="3"
                />
              </div>
              
              <div className="form-actions">
                <button type="submit" className="btn-submit">C·∫≠p nh·∫≠t</button>
                <button type="button" className="btn-cancel" onClick={handleCloseEditForm}>
                  H·ªßy
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

    </div>
  );
};

export default LichVe;
