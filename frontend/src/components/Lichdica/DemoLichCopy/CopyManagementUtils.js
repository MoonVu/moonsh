import React from "react";
import apiService from "../../../services/api";
import { message } from 'antd';

export default function CopyManagementUtils() {
  // Function l∆∞u b·∫£n sao
  const handleSaveCopy = async (copyData, month, year, scheduleData, phanCa, notesData, setSavingCopy) => {
    try {
      setSavingCopy(true);
      
      if (!copyData || !copyData.copyId) {
        message.error("‚ùå Kh√¥ng t√¨m th·∫•y ID b·∫£n sao ƒë·ªÉ l∆∞u");
        return;
      }
      
      const copyName = `B·∫£n sao th√°ng ${month}/${year}`;
      
      // Ki·ªÉm tra backend tr∆∞·ªõc
      try {
        const healthCheck = await fetch(process.env.REACT_APP_API_URL+'/api/health');
        if (!healthCheck.ok) {
          throw new Error(`Backend kh√¥ng kh·∫£ d·ª•ng: ${healthCheck.status}`);
        }
        console.log("‚úÖ Backend ƒëang ho·∫°t ƒë·ªông");
      } catch (healthErr) {
        console.error("‚ùå Backend kh√¥ng kh·∫£ d·ª•ng:", healthErr);
        message.error("‚ùå Backend kh√¥ng kh·∫£ d·ª•ng. Kh√¥ng l∆∞u t·∫°m v√†o localStorage n·ªØa. Vui l√≤ng th·ª≠ l·∫°i khi backend ho·∫°t ƒë·ªông.");
        setSavingCopy(false);
        return;
      }
      
      const response = await apiService.updateScheduleCopy(copyData.copyId, {
        month,
        year,
        name: copyName,
        scheduleData,
        phanCa,
        notesData
      });

      console.log("üîç Debug l∆∞u b·∫£n sao:", {
        copyId: copyData.copyId,
        notesData: notesData,
        notesDataKeys: Object.keys(notesData),
        hasNotes: Object.keys(notesData).length > 0,
        notesDataString: JSON.stringify(notesData),
        response: response
      });

      if (response && response.success) {
        message.success(`‚úÖ ƒê√£ l∆∞u b·∫£n sao th√†nh c√¥ng: ${copyName}`);
        
        // C·∫≠p nh·∫≠t copyData local m·ªôt c√°ch an to√†n
        if (copyData) {
          // T·∫°o object m·ªõi ƒë·ªÉ tr√°nh mutation tr·ª±c ti·∫øp
          const updatedCopyData = {
            ...copyData,
            scheduleData: { ...scheduleData },
            phanCa: { ...phanCa },
            notesData: { ...notesData },
            month: month,
            year: year
          };
          
          console.log("üîç Debug c·∫≠p nh·∫≠t copyData:", {
            oldNotesData: copyData.notesData,
            newNotesData: notesData,
            updatedCopyData: updatedCopyData
          });
          
          // C·∫≠p nh·∫≠t prop copyData n·∫øu c√≥ th·ªÉ
          if (typeof copyData === 'object') {
            Object.assign(copyData, updatedCopyData);
            console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t copyData v·ªõi notesData m·ªõi");
          }
        }
      } else {
        message.error(`‚ùå L·ªói khi l∆∞u b·∫£n sao: ${response?.error || "Kh√¥ng x√°c ƒë·ªãnh"}`);
      }
    } catch (err) {
      console.error("‚ùå L·ªói khi l∆∞u b·∫£n sao:", err);
      message.error("‚ùå L·ªói khi l∆∞u b·∫£n sao: " + err.message);
    } finally {
      setSavingCopy(false);
    }
  };

  // Function x√≥a b·∫£n sao
  const handleDeleteCopy = async (copyData, tabId, setScheduleData, setPhanCa, setUsers, setMonth, setYear, today) => {
    try {
      if (!copyData || !copyData.copyId) {
        message.error("‚ùå Kh√¥ng t√¨m th·∫•y ID b·∫£n sao ƒë·ªÉ x√≥a");
        return;
      }

      // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
      if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b·∫£n sao n√†y kh√¥ng? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.")) {
        return;
      }

      // 1) X√≥a b·∫£n sao kh·ªèi backend
      const deleteCopyResponse = await apiService.deleteScheduleCopy(copyData.copyId);
      if (!deleteCopyResponse || !deleteCopyResponse.success) {
        message.error(`‚ùå L·ªói khi x√≥a b·∫£n sao: ${deleteCopyResponse?.error || "Kh√¥ng x√°c ƒë·ªãnh"}`);
        return;
      }

      // 2) X√≥a lu√¥n TAB t∆∞∆°ng ·ª©ng ƒë·ªÉ bi·∫øn m·∫•t kh·ªèi UI
      if (tabId) {
        try {
          const deleteTabRes = await apiService.deleteScheduleTab(tabId);
          if (!deleteTabRes || !deleteTabRes.success) {
            console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a tab sau khi x√≥a b·∫£n sao:", deleteTabRes);
          }
        } catch (e) {
          console.warn("‚ö†Ô∏è L·ªói khi g·ªçi API x√≥a tab:", e);
        }
      }

      // X√≥a d·ªØ li·ªáu kh·ªèi localStorage n·∫øu c√≥
      if (copyData?.copyId) {
        const localKey = `copy_${copyData.copyId}_data`;
        localStorage.removeItem(localKey);
        console.log("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu kh·ªèi localStorage:", localKey);
        
        // X√≥a t·∫•t c·∫£ c√°c key li√™n quan ƒë·∫øn copy n√†y
        const allKeys = Object.keys(localStorage);
        allKeys.forEach(key => {
          if (key.includes(copyData.copyId)) {
            localStorage.removeItem(key);
            console.log("‚úÖ ƒê√£ x√≥a key localStorage:", key);
          }
        });
      }

      // X√≥a d·ªØ li·ªáu kh·ªèi state local
      setScheduleData({});
      setPhanCa({});
      setUsers([]);
      setMonth(today.getMonth() + 1);
      setYear(today.getFullYear());
      console.log("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu kh·ªèi state local v√† reset v·ªÅ th√°ng/nƒÉm hi·ªán t·∫°i");

      message.success("‚úÖ ƒê√£ x√≥a b·∫£n sao v√† tab t∆∞∆°ng ·ª©ng!");
      
      // 3) Refresh tabs ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch v√† x√≥a tab n√†y
      if (window.refreshTabs) {
        window.refreshTabs();
      }

      // 4) Chuy·ªÉn v·ªÅ tab Demo g·ªëc sau khi x√≥a
      setTimeout(() => {
        if (window.switchToTab) {
          window.switchToTab('demo'); // Chuy·ªÉn v·ªÅ tab demo g·ªëc
        }
      }, 1000); // TƒÉng delay ƒë·ªÉ ƒë·∫£m b·∫£o refreshTabs ho√†n th√†nh tr∆∞·ªõc

    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a b·∫£n sao:", err);
      message.error("‚ùå L·ªói khi x√≥a b·∫£n sao: " + err.message);
    }
  };

  // Function ki·ªÉm tra v√† d·ªçn d·∫πp b·∫£n sao zombie
  const checkAndCleanupZombieCopy = async (copyData) => {
    if (!copyData?.copyId) return;
    
    try {
      console.log("üîç Ki·ªÉm tra b·∫£n sao zombie...");
      const response = await apiService.getScheduleCopy(copyData.copyId);
      
      if (!response || !response.success) {
        console.warn("‚ö†Ô∏è Ph√°t hi·ªán b·∫£n sao zombie, hi·ªÉn th·ªã c·∫£nh b√°o");
        message.warning("‚ö†Ô∏è B·∫£n sao n√†y kh√¥ng t·ªìn t·∫°i tr√™n backend. C√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c c√≥ l·ªói k·∫øt n·ªëi.");
        
        // Hi·ªÉn th·ªã n√∫t x√≥a nhanh
        if (window.confirm("B·∫£n sao n√†y kh√¥ng t·ªìn t·∫°i tr√™n backend. B·∫°n c√≥ mu·ªën x√≥a tab n√†y kh√¥ng?")) {
          await handleDeleteTabOnly(copyData);
        }
      }
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra b·∫£n sao zombie:", err);
    }
  };

  // Function x√≥a ch·ªâ tab local (fallback)
  const handleDeleteTabOnly = async (copyData) => {
    try {
      // X√≥a d·ªØ li·ªáu kh·ªèi localStorage n·∫øu c√≥
      if (copyData?.copyId) {
        const localKey = `copy_${copyData.copyId}_data`;
        localStorage.removeItem(localKey);
        console.log("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu kh·ªèi localStorage");
      }
      
      console.log("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu kh·ªèi state");
      
      // Refresh tabs v√† chuy·ªÉn v·ªÅ tab Demo g·ªëc
      if (window.refreshTabs) {
        window.refreshTabs();
      }
      
      // Chuy·ªÉn v·ªÅ tab Demo g·ªëc
    } catch (err) {
      console.error("‚ùå L·ªói khi x√≥a tab local:", err);
      throw err;
    }
  };

  return {
    handleSaveCopy,
    handleDeleteCopy,
    checkAndCleanupZombieCopy,
    handleDeleteTabOnly
  };
}
