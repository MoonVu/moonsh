import React, { useState, useEffect, useMemo } from "react";
import { Modal, Form, Input, message, Select } from 'antd';
import { useAuth } from "../../../hooks/useAuth";
import { ShowForPermission as AccessControl } from "../../auth/AccessControl";
import apiService from "../../../services/api";

export default function NoteManagementModals({
  noteModalVisible,
  setNoteModalVisible,
  editNoteModalVisible,
  setEditNoteModalVisible,
  editingNote,
  setEditingNote,
  noteForm,
  editNoteForm,
  filteredStaffsByCa,
  daysInMonth,
  notesData,
  setNotesData,
  scheduleData,
  phanCa,
  month,
  year,
  copyData,
  handleOpenEditNote,
  handleUpdateNote,
  handleDeleteNote
}) {
  const { isAdmin } = useAuth();

  return (
    <>
      {/* Popup ch√®n ghi ch√∫ - ch·ªâ admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng */}
      <AccessControl resource="schedules" action="edit" fallback={null}>
        <Modal
          title="Ch√®n ghi ch√∫ v√†o √¥"
          open={noteModalVisible}
          onCancel={() => setNoteModalVisible(false)}
          onOk={async () => {
            try {
              const values = await noteForm.validateFields();
              const { staffId, day, note } = values;
              const staffName = filteredStaffsByCa.find(s => s.id === staffId)?.name || 'Nh√¢n vi√™n';
              
              // T·∫°o notesData m·ªõi
              const newNotesData = {
                ...notesData,
                [staffId]: { ...(notesData[staffId] || {}), [day]: note }
              };
              
              // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c
              setNotesData(newNotesData);
              
              // T·ª± ƒë·ªông l∆∞u v√†o backend
              if (copyData?.copyId) {
                try {
                  console.log('üîÑ T·ª± ƒë·ªông l∆∞u ghi ch√∫ m·ªõi:', {
                    staffId,
                    day,
                    note,
                    copyId: copyData.copyId,
                    newNotesData
                  });
                  
                  const response = await apiService.updateScheduleCopy(copyData.copyId, {
                    month,
                    year,
                    name: `B·∫£n sao th√°ng ${month}/${year}`,
                    scheduleData,
                    phanCa,
                    notesData: newNotesData
                  });
                  
                  if (response && response.success) {
                    console.log('‚úÖ ƒê√£ t·ª± ƒë·ªông l∆∞u ghi ch√∫ m·ªõi th√†nh c√¥ng');
                    message.success('‚úÖ ƒê√£ th√™m ghi ch√∫ th√†nh c√¥ng');
                  } else {
                    console.error('‚ùå L·ªói khi t·ª± ƒë·ªông l∆∞u ghi ch√∫ m·ªõi:', response?.error);
                    message.error('‚ùå Kh√¥ng th·ªÉ l∆∞u ghi ch√∫: ' + (response?.error || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
                  }
                } catch (error) {
                  console.error('‚ùå L·ªói khi g·ªçi API l∆∞u ghi ch√∫ m·ªõi:', error);
                  message.error('‚ùå L·ªói khi l∆∞u ghi ch√∫: ' + error.message);
                }
              } else {
                console.warn('‚ö†Ô∏è Kh√¥ng c√≥ copyId, kh√¥ng th·ªÉ l∆∞u ghi ch√∫ m·ªõi');
                message.warning('‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u ghi ch√∫ (thi·∫øu th√¥ng tin b·∫£n sao)');
              }
              
              setNoteModalVisible(false);
              noteForm.resetFields();
            } catch (error) {
              console.error('‚ùå L·ªói khi th√™m ghi ch√∫:', error);
            }
          }}
        >
          <Form form={noteForm} layout="vertical">
            <Form.Item label="T√™n nh√¢n vi√™n" name="staffId" rules={[{ required: true, message: 'Ch·ªçn nh√¢n vi√™n' }]}>
              <Select
                showSearch
                options={filteredStaffsByCa.map(s => ({ value: s.id, label: `${s.name} (${s.department})` }))}
                filterOption={(input, option) => (option?.label ?? '').toLowerCase().includes(input.toLowerCase())}
              />
            </Form.Item>
            <Form.Item label="Ng√†y" name="day" rules={[{ required: true, message: 'Ch·ªçn ng√†y' }]}>
              <Select options={Array.from({ length: daysInMonth }, (_, i) => ({ value: i + 1, label: String(i + 1).padStart(2, '0') }))} />
            </Form.Item>
            <Form.Item label="Ghi ch√∫" name="note" rules={[{ required: true, message: 'Nh·∫≠p ghi ch√∫' }]}>
              <Input.TextArea rows={3} placeholder="N·ªôi dung ghi ch√∫" />
            </Form.Item>
          </Form>
        </Modal>
      </AccessControl>

      {/* Popup c·∫≠p nh·∫≠t ghi ch√∫ */}
      <Modal
        title={`${isAdmin ? 'Ch·ªânh s·ª≠a' : 'Xem'} ghi ch√∫ - ${editingNote.staffName} ng√†y ${editingNote.day}`}
        open={editNoteModalVisible}
        onCancel={() => setEditNoteModalVisible(false)}
        footer={[
          isAdmin && (
            <button key="delete" onClick={handleDeleteNote} style={{
              background: '#ff4d4f',
              color: 'white',
              border: 'none',
              padding: '8px 16px',
              borderRadius: '4px',
              cursor: 'pointer',
              marginRight: '8px'
            }}>
              X√≥a
            </button>
          ),
          <button key="cancel" onClick={() => setEditNoteModalVisible(false)} style={{
            background: '#f0f0f0',
            color: '#333',
            border: 'none',
            padding: '8px 16px',
            borderRadius: '4px',
            cursor: 'pointer',
            marginRight: '8px'
          }}>
            {isAdmin ? 'H·ªßy' : 'ƒê√≥ng'}
          </button>,
          isAdmin && (
            <button key="update" onClick={handleUpdateNote} style={{
              background: '#1890ff',
              color: 'white',
              border: 'none',
              padding: '8px 16px',
              borderRadius: '4px',
              cursor: 'pointer'
            }}>
              C·∫≠p nh·∫≠t
            </button>
          )
        ].filter(Boolean)}
      >
        <Form form={editNoteForm} layout="vertical">
          <Form.Item label="Ghi ch√∫" name="note" rules={isAdmin ? [{ required: true, message: 'Nh·∫≠p ghi ch√∫' }] : []}>
            <Input.TextArea 
              rows={4} 
              placeholder={isAdmin ? "N·ªôi dung ghi ch√∫" : "Ch·ªâ admin m·ªõi c√≥ th·ªÉ ch·ªânh s·ª≠a"}
              disabled={!isAdmin}
            />
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
}
