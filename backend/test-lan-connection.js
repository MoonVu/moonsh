const http = require('http');
const os = require('os');

// L·∫•y IP c·ªßa m√°y hi·ªán t·∫°i
function getLocalIP() {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const interface of interfaces[name]) {
      // B·ªè qua IPv6 v√† loopback
      if (interface.family === 'IPv4' && !interface.internal) {
        return interface.address;
      }
    }
  }
  return '127.0.0.1';
}

const localIP = getLocalIP();
const PORT = process.env.PORT || 5000;

console.log('üåê Th√¥ng tin m·∫°ng LAN:');
console.log(`üìç IP m√°y hi·ªán t·∫°i: ${localIP}`);
console.log(`üîå Port server: ${PORT}`);
console.log(`üîó URL truy c·∫≠p local: http://localhost:${PORT}/api/health`);
console.log(`üåê URL truy c·∫≠p LAN: http://${localIP}:${PORT}/api/health`);
console.log('');

// Test k·∫øt n·ªëi
console.log('üß™ ƒêang test k·∫øt n·ªëi...');

const options = {
  hostname: localIP,
  port: PORT,
  path: '/api/health',
  method: 'GET',
  timeout: 5000
};

const req = http.request(options, (res) => {
  console.log(`‚úÖ Server ƒëang ho·∫°t ƒë·ªông! Status: ${res.statusCode}`);
  console.log(`üåê C√°c m√°y kh√°c trong m·∫°ng LAN c√≥ th·ªÉ truy c·∫≠p qua: http://${localIP}:${PORT}`);
  console.log('');
  console.log('üìã H∆∞·ªõng d·∫´n cho c√°c m√°y kh√°c:');
  console.log(`1. M·ªü tr√¨nh duy·ªát v√† truy c·∫≠p: http://${localIP}:${PORT}/api/health`);
  console.log(`2. N·∫øu frontend React, thay ƒë·ªïi API_URL th√†nh: http://${localIP}:${PORT}`);
  console.log(`3. ƒê·∫£m b·∫£o firewall cho ph√©p port ${PORT}`);
});

req.on('error', (err) => {
  console.log(`‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi: ${err.message}`);
  console.log('üí° H√£y ƒë·∫£m b·∫£o server ƒëang ch·∫°y: npm start');
});

req.on('timeout', () => {
  console.log('‚è∞ Timeout - Server kh√¥ng ph·∫£n h·ªìi');
  req.destroy();
});

req.end(); 