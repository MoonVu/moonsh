/**
 * Auth Routes - C√°c route x·ª≠ l√Ω x√°c th·ª±c
 */

const express = require('express');
const router = express.Router();
const authService = require('../auth/authService');
const { attachUser, requireAdmin, logUserActivity } = require('../middleware/auth');

/**
 * POST /api/auth/login
 * ƒêƒÉng nh·∫≠p
 */
router.post('/login', async (req, res) => {
  try {
    console.log('üîç Login request body:', req.body);
    const { username, password } = req.body;

    console.log('üîç Extracted credentials:', { 
      username: `"${username}"`, 
      password: password ? `${password.length} chars` : 'undefined',
      usernameType: typeof username,
      passwordType: typeof password
    });

    // Validate input
    if (!username || !password) {
      console.log('‚ùå Missing credentials validation failed');
      return res.status(400).json({
        success: false,
        error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u'
      });
    }

    // ƒêƒÉng nh·∫≠p
    const result = await authService.login(username, password);
    
    if (result.success) {
      console.log(`‚úÖ Login th√†nh c√¥ng: ${username} (${result.data.user.role})`);
      res.json(result);
    } else {
      console.log(`‚ùå Login th·∫•t b·∫°i: ${username} - ${result.error}`);
      res.status(401).json(result);
    }

  } catch (error) {
    console.error('‚ùå L·ªói login route:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng'
    });
  }
});

/**
 * POST /api/auth/verify
 * X√°c minh token
 */
router.post('/verify', async (req, res) => {
  try {
    const { token } = req.body;

    if (!token) {
      return res.status(400).json({
        success: false,
        error: 'Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p'
      });
    }

    const result = await authService.getUserFromToken(token);
    
    if (result.success) {
      res.json({
        success: true,
        data: { user: result.data }
      });
    } else {
      res.status(401).json(result);
    }

  } catch (error) {
    console.error('‚ùå L·ªói verify route:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng'
    });
  }
});

/**
 * GET /api/auth/me
 * L·∫•y th√¥ng tin user hi·ªán t·∫°i
 */
router.get('/me', attachUser, (req, res) => {
  try {
    res.json({
      success: true,
      data: { user: req.user }
    });
  } catch (error) {
    console.error('‚ùå L·ªói me route:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng'
    });
  }
});

/**
 * POST /api/auth/change-password
 * ƒê·ªïi m·∫≠t kh·∫©u
 */
router.post('/change-password', attachUser, logUserActivity('ƒë·ªïi m·∫≠t kh·∫©u'), async (req, res) => {
  try {
    const { oldPassword, newPassword, confirmPassword } = req.body;

    // Validate input
    if (!oldPassword || !newPassword || !confirmPassword) {
      return res.status(400).json({
        success: false,
        error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin'
      });
    }

    if (newPassword !== confirmPassword) {
      return res.status(400).json({
        success: false,
        error: 'M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'
      });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({
        success: false,
        error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
      });
    }

    // ƒê·ªïi m·∫≠t kh·∫©u
    const result = await authService.changePassword(req.user.id, oldPassword, newPassword);
    
    if (result.success) {
      console.log(`‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng: ${req.user.username}`);
      res.json({
        success: true,
        message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
      });
    } else {
      res.status(400).json(result);
    }

  } catch (error) {
    console.error('‚ùå L·ªói change-password route:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng'
    });
  }
});

/**
 * POST /api/auth/create-user
 * T·∫°o user m·ªõi (ch·ªâ admin)
 */
router.post('/create-user', attachUser, requireAdmin, logUserActivity('t·∫°o user m·ªõi'), async (req, res) => {
  try {
    const { username, password, group_name, groupCode } = req.body;

    // Validate input
    if (!username || !password || !groupCode) {
      return res.status(400).json({
        success: false,
        error: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc'
      });
    }

    if (password.length < 6) {
      return res.status(400).json({
        success: false,
        error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
      });
    }

    // T·∫°o user
    const result = await authService.createUser({
      username,
      password,
      group_name,
      groupCode
    });

    if (result.success) {
      console.log(`‚úÖ T·∫°o user th√†nh c√¥ng: ${username} b·ªüi ${req.user.username}`);
      res.status(201).json(result);
    } else {
      res.status(400).json(result);
    }

  } catch (error) {
    console.error('‚ùå L·ªói create-user route:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng'
    });
  }
});

/**
 * POST /api/auth/logout
 * ƒêƒÉng xu·∫•t (client-side ch·ªâ c·∫ßn x√≥a token)
 */
router.post('/logout', (req, res) => {
  try {
    res.json({
      success: true,
      message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('‚ùå L·ªói logout route:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói h·ªá th·ªëng'
    });
  }
});

module.exports = router;
