/**
 * Users Routes - Qu·∫£n l√Ω users v·ªõi ph√¢n quy·ªÅn
 */

const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const { authOptimized, authorize } = require('../middleware/authOptimized');
const User = require('../../models/User');
const Role = require('../../models/Role');
const { ROLES } = require('../config/permissions');
const { getRoleFromGroupCode } = require('../config/role-map');
const mongoose = require('mongoose'); // Added for debug route

// Middleware: S·ª≠ d·ª•ng authOptimized thay v√¨ attachUser + attachPermissions
router.use(authOptimized);

/**
 * GET /api/users/debug
 * Debug route ƒë·ªÉ ki·ªÉm tra database v√† users
 */


/**
 * GET /api/users
 * L·∫•y danh s√°ch users (t·∫•t c·∫£ user ƒë·ªÅu c√≥ th·ªÉ xem)
 */
router.get('/', async (req, res) => {
  try {
    const { page = 1, limit = 20, role, groupCode, status, search } = req.query;
    
    // X√¢y d·ª±ng query filter
    const filter = {};
    
    // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c filter theo role/status nh·∫°y c·∫£m
    if (req.user.role.name === ROLES.ADMIN) {
      if (role) filter.role = role;
      if (status) filter.status = status;
    } else {
      // User th∆∞·ªùng ch·ªâ th·∫•y user active
      filter.status = 'Ho·∫°t ƒë·ªông';
    }
    
    if (groupCode) filter.groupCode = groupCode;
    
    if (search) {
      filter.$or = [
        { username: { $regex: search, $options: 'i' } },
        { group_name: { $regex: search, $options: 'i' } }
      ];
    }

    // Pagination
    const skip = (parseInt(page) - 1) * parseInt(limit);
    
    // Select fields d·ª±a tr√™n role
    let selectFields = '-password'; // Lu√¥n ·∫©n password
    if (req.user.role.name !== ROLES.ADMIN) {
      // User th∆∞·ªùng kh√¥ng th·∫•y m·ªôt s·ªë field nh·∫°y c·∫£m
      selectFields += ' -role';
    }
    
    const [users, total] = await Promise.all([
      User.find(filter)
        .select(selectFields)
        .sort({ username: 1 })
        .skip(skip)
        .limit(parseInt(limit)),
      User.countDocuments(filter)
    ]);

    res.json({
      success: true,
      data: {
        users,
        pagination: {
          page: parseInt(page),
          limit: parseInt(limit),
          total,
          pages: Math.ceil(total / parseInt(limit))
        }
      }
    });

  } catch (error) {
    console.error('‚ùå L·ªói users list:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói l·∫•y danh s√°ch users'
    });
  }
});

/**
 * GET /api/users/:id
 * L·∫•y th√¥ng tin user theo ID
 */
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // Select fields d·ª±a tr√™n quy·ªÅn
    let selectFields = '-password';
    if (req.user.role.name !== ROLES.ADMIN && req.user.id !== id) {
      selectFields += ' -role';
    }
    
    const user = await User.findById(id).select(selectFields);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User kh√¥ng t·ªìn t·∫°i'
      });
    }

    res.json({
      success: true,
      data: user
    });

  } catch (error) {
    console.error('‚ùå L·ªói users/:id:', error);
    res.status(500).json({
      success: false,
      error: 'L·ªói l·∫•y th√¥ng tin user'
    });
  }
});

/**
 * POST /api/users
 * T·∫°o user m·ªõi (ch·ªâ admin ho·∫∑c user c√≥ quy·ªÅn create)
 */
router.post('/', 
  requirePermission('users', 'edit'),
  logUserActivity('t·∫°o user m·ªõi'),
  async (req, res) => {
    try {
      const { username, password, group_name, groupCode, role, status } = req.body;

      // Validate input
      if (!username || !password) {
        return res.status(400).json({
          success: false,
          error: 'Username v√† password l√† b·∫Øt bu·ªôc'
        });
      }

      if (password.length < 6) {
        return res.status(400).json({
          success: false,
          error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
        });
      }

      // Ki·ªÉm tra username ƒë√£ t·ªìn t·∫°i
      const existingUser = await User.findOne({ 
        username: { $regex: `^${username}$`, $options: 'i' }
      });
      
      if (existingUser) {
        return res.status(400).json({
          success: false,
          error: 'Username ƒë√£ t·ªìn t·∫°i'
        });
      }

      // X√°c ƒë·ªãnh role name
      let roleName = 'FK'; // Default role
      if (req.user.role.name === ROLES.ADMIN && role) {
        // Admin c√≥ th·ªÉ set role tr·ª±c ti·∫øp
        roleName = role;
      } else if (groupCode) {
        // Mapping t·ª´ groupCode
        roleName = getRoleFromGroupCode(groupCode) || 'FK';
      }

      // T√¨m Role object t·ª´ database
      const roleObject = await Role.findOne({ name: roleName });
      if (!roleObject) {
        return res.status(400).json({
          success: false,
          error: `Role ${roleName} kh√¥ng t·ªìn t·∫°i`
        });
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 10);

      // T·∫°o user m·ªõi
      const newUser = new User({
        username,
        password: hashedPassword,
        group_name: group_name || '',
        groupCode: groupCode || 'FK',
        role: roleObject._id,
        roleString: roleName,
        status: status || 'Ho·∫°t ƒë·ªông',
        start_date: new Date()
      });

      await newUser.save();

      // Tr·∫£ v·ªÅ user kh√¥ng c√≥ password
      const userResponse = await User.findById(newUser._id).select('-password');

      console.log(`‚úÖ User ${req.user.username} ƒë√£ t·∫°o user m·ªõi: ${username} (${roleName})`);

      res.status(201).json({
        success: true,
        data: userResponse,
        message: 'T·∫°o user th√†nh c√¥ng'
      });

    } catch (error) {
      console.error('‚ùå L·ªói t·∫°o user:', error);
      res.status(500).json({
        success: false,
        error: 'L·ªói t·∫°o user'
      });
    }
  }
);

/**
 * PUT /api/users/:id
 * C·∫≠p nh·∫≠t th√¥ng tin user
 */
router.put('/:id',
  requirePermission('users', 'edit'),
  logUserActivity('c·∫≠p nh·∫≠t user'),
  async (req, res) => {
    try {
      const { id } = req.params;
      const { username, password, group_name, groupCode, status, start_date } = req.body;
      
      console.log('üîß PUT /api/users/:id - Request body:', { username, password: password ? '[HIDDEN]' : undefined, group_name, groupCode, status, start_date });
      console.log('üîß PUT /api/users/:id - Request params:', { id, idType: typeof id, idLength: id?.length });
      console.log('üîß PUT /api/users/:id - req.user info:', {
        userId: req.user?.id,
        username: req.user?.username,
        roleName: req.user?.role?.name,
        hasRole: !!req.user?.role
      });

      // T√¨m user
      const user = await User.findById(id);
      
      // Debug: Ki·ªÉm tra k·∫øt qu·∫£ t√¨m user
      console.log('üîß PUT /api/users/:id - User.findById result:', {
        found: !!user,
        searchId: id,
        searchIdType: typeof id,
        searchIdLength: id?.length,
        searchIdIsObjectId: /^[0-9a-fA-F]{24}$/.test(id),
        foundUser: user ? {
          id: user._id,
          username: user.username,
          status: user.status,
          group_name: user.group_name,
          groupCode: user.groupCode,
          role_key: user.role_key,
          roleString: user.roleString,
          role: user.role
        } : null
      });
      
      // Debug: Th·ª≠ t√¨m user b·∫±ng c√°c c√°ch kh√°c
      if (!user) {

      }
      
      if (!user) {
        return res.status(404).json({
          success: false,
          error: 'User kh√¥ng t·ªìn t·∫°i'
        });
      }

      // Ki·ªÉm tra quy·ªÅn: ch·ªâ admin ho·∫∑c ch√≠nh user ƒë√≥ m·ªõi ƒë∆∞·ª£c s·ª≠a
      if (req.user.role.name !== ROLES.ADMIN && req.user.id !== id) {
        return res.status(403).json({
          success: false,
          error: 'Kh√¥ng c√≥ quy·ªÅn s·ª≠a user n√†y'
        });
      }

      // Chu·∫©n b·ªã data c·∫≠p nh·∫≠t
      const updateData = {};
      
      if (username) {
        // Ki·ªÉm tra username m·ªõi c√≥ tr√πng kh√¥ng
        const existingUser = await User.findOne({ 
          username: { $regex: `^${username}$`, $options: 'i' },
          _id: { $ne: id }
        });
        if (existingUser) {
          return res.status(400).json({
            success: false,
            error: 'Username ƒë√£ t·ªìn t·∫°i'
          });
        }
        updateData.username = username;
      }

      if (password) {
        if (password.length < 6) {
          return res.status(400).json({
            success: false,
            error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
          });
        }
        updateData.password = await bcrypt.hash(password, 10);
      }

      if (group_name !== undefined) updateData.group_name = group_name;
      if (groupCode !== undefined) {
        updateData.groupCode = groupCode;
        

        
        // C·∫≠p nh·∫≠t roleString theo groupCode m·ªõi (role_key kh√¥ng c·∫ßn thi·∫øt)
        const newRoleString = getRoleFromGroupCode(groupCode);
        

        
        // Ch·ªâ c·∫≠p nh·∫≠t roleString, kh√¥ng c·∫≠p nh·∫≠t role_key
        updateData.roleString = newRoleString;
        
        // C·∫≠p nh·∫≠t role ObjectId t·ª´ database
        if (newRoleString) {
          const newRole = await Role.findOne({ name: newRoleString });
          if (newRole) {
            updateData.role = newRole._id;

          } else {
            console.warn('‚ö†Ô∏è Role not found for:', newRoleString);
          }
        }
      }
      
      // Ch·ªâ admin m·ªõi ƒë∆∞·ª£c thay ƒë·ªïi status
      if (status !== undefined && req.user.role.name === ROLES.ADMIN) {
        updateData.status = status;
      }

      // X·ª≠ l√Ω start_date
      if (start_date !== undefined) {
        updateData.start_date = start_date;

      }



      // C·∫≠p nh·∫≠t user
      const updatedUser = await User.findByIdAndUpdate(
        id,
        updateData,
        { new: true, runValidators: true }
      ).select('-password');

      console.log(`‚úÖ User ${req.user.username} ƒë√£ c·∫≠p nh·∫≠t user: ${updatedUser.username}`);

      res.json({
        success: true,
        data: updatedUser,
        message: 'C·∫≠p nh·∫≠t user th√†nh c√¥ng'
      });

    } catch (error) {
      console.error('‚ùå L·ªói c·∫≠p nh·∫≠t user:', error);
      res.status(500).json({
        success: false,
        error: 'L·ªói c·∫≠p nh·∫≠t user'
      });
    }
  }
);

/**
 * DELETE /api/users/:id
 * X√≥a user (ch·ªâ admin)
 */
router.delete('/:id',
  requirePermission('users', 'delete'),
  logUserActivity('x√≥a user'),
  async (req, res) => {
    try {
      const { id } = req.params;

      // T√¨m user
      const user = await User.findById(id);
      if (!user) {
        return res.status(404).json({
          success: false,
          error: 'User kh√¥ng t·ªìn t·∫°i'
        });
      }

      // Kh√¥ng cho ph√©p x√≥a ch√≠nh m√¨nh
      if (user._id.toString() === req.user.id) {
        return res.status(400).json({
          success: false,
          error: 'Kh√¥ng th·ªÉ x√≥a ch√≠nh m√¨nh'
        });
      }

      await User.findByIdAndDelete(id);

      console.log(`‚úÖ User ${req.user.username} ƒë√£ x√≥a user: ${user.username}`);

      res.json({
        success: true,
        message: `ƒê√£ x√≥a user ${user.username}`
      });

    } catch (error) {
      console.error('‚ùå L·ªói x√≥a user:', error);
      res.status(500).json({
        success: false,
        error: 'L·ªói x√≥a user'
      });
    }
  }
);

/**
 * POST /api/users/:id/change-password
 * ƒê·ªïi m·∫≠t kh·∫©u user kh√°c (admin) ho·∫∑c ch√≠nh m√¨nh
 */
router.post('/:id/change-password',
  logUserActivity('ƒë·ªïi m·∫≠t kh·∫©u'),
  async (req, res) => {
    try {
      const { id } = req.params;
      const { newPassword, oldPassword } = req.body;

      // Validate
      if (!newPassword) {
        return res.status(400).json({
          success: false,
          error: 'M·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc'
        });
      }

      if (newPassword.length < 6) {
        return res.status(400).json({
          success: false,
          error: 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±'
        });
      }

      // T√¨m user
      const user = await User.findById(id).select('+password');
      if (!user) {
        return res.status(404).json({
          success: false,
          error: 'User kh√¥ng t·ªìn t·∫°i'
        });
      }

      // Ki·ªÉm tra quy·ªÅn
      const isSelf = user._id.toString() === req.user.id;
      const isAdmin = req.user.role.name === ROLES.ADMIN;

      if (!isSelf && !isAdmin) {
        return res.status(403).json({
          success: false,
          error: 'Kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u user n√†y'
        });
      }

      // N·∫øu l√† ƒë·ªïi m·∫≠t kh·∫©u c·ªßa ch√≠nh m√¨nh, c·∫ßn m·∫≠t kh·∫©u c≈©
      if (isSelf && !isAdmin) {
        if (!oldPassword) {
          return res.status(400).json({
            success: false,
            error: 'M·∫≠t kh·∫©u c≈© l√† b·∫Øt bu·ªôc'
          });
        }

        const isValidOldPassword = await bcrypt.compare(oldPassword, user.password);
        if (!isValidOldPassword) {
          return res.status(400).json({
            success: false,
            error: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng'
          });
        }
      }

      // Hash m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t
      const hashedPassword = await bcrypt.hash(newPassword, 10);
      await User.findByIdAndUpdate(id, { password: hashedPassword });

      console.log(`‚úÖ ${isSelf ? 'T·ª±' : 'Admin'} ƒë·ªïi m·∫≠t kh·∫©u user: ${user.username}`);

      res.json({
        success: true,
        message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng'
      });

    } catch (error) {
      console.error('‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:', error);
      res.status(500).json({
        success: false,
        error: 'L·ªói ƒë·ªïi m·∫≠t kh·∫©u'
      });
    }
  }
);

module.exports = router;
