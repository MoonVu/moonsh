/**
 * Auth Service - X·ª≠ l√Ω x√°c th·ª±c v√† JWT
 */

const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const User = require('../../models/User');
const { getRoleFromGroupCode } = require('../config/role-map');
const { isValidRole } = require('../config/permissions');

class AuthService {
  /**
   * ƒêƒÉng nh·∫≠p user
   * @param {string} username 
   * @param {string} password 
   * @returns {Object} { success, data?, error? }
   */
  async login(username, password) {
    try {
      console.log('üîç AuthService.login called with:', { 
        username: `"${username}"`, 
        usernameLength: username?.length,
        usernameTrimmed: `"${username?.trim()}"`,
        password: password ? `${password.length} chars` : 'undefined'
      });

      // T√¨m user v·ªõi trim v√† case insensitive
      const trimmedUsername = username?.trim();
      console.log('üîç Searching for user with query:', { username: trimmedUsername });
      
      const user = await User.findOne({ 
        username: { $regex: new RegExp(`^${trimmedUsername}$`, 'i') }
      }).select('+password');
      
      console.log('üîç User found:', user ? {
        id: user._id,
        username: user.username,
        status: user.status,
        role: user.role,
        groupCode: user.groupCode
      } : 'null');
      
      if (!user) {
        return {
          success: false,
          error: 'T√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i'
        };
      }

      // Ki·ªÉm tra password
      const isValidPassword = await bcrypt.compare(password, user.password);
      if (!isValidPassword) {
        return {
          success: false,
          error: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng'
        };
      }

      // Ki·ªÉm tra tr·∫°ng th√°i user
      if (user.status !== 'Ho·∫°t ƒë·ªông') {
        return {
          success: false,
          error: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a ho·∫∑c ng∆∞ng s·ª≠ d·ª•ng'
        };
      }

      // T·∫°o JWT token
      const token = this.generateToken(user);
      
      // Tr·∫£ v·ªÅ th√¥ng tin user (kh√¥ng bao g·ªìm password)
      const userInfo = {
        id: user._id,
        username: user.username,
        group_name: user.group_name,
        groupCode: user.groupCode,
        role: user.role,
        status: user.status,
        start_date: user.start_date,
        permissions: user.permissions // Virtual field
      };

      return {
        success: true,
        data: {
          user: userInfo,
          token,
          expiresIn: process.env.JWT_EXPIRE || '24h'
        }
      };

    } catch (error) {
      return {
        success: false,
        error: 'L·ªói h·ªá th·ªëng: ' + error.message
      };
    }
  }

  /**
   * T·∫°o JWT token
   * @param {Object} user - User object
   * @returns {string} JWT token
   */
  generateToken(user) {
    const payload = {
      userId: user._id,
      username: user.username,
      role: user.role,
      groupCode: user.groupCode,
      iat: Math.floor(Date.now() / 1000)
    };

    return jwt.sign(
      payload,
      process.env.JWT_SECRET || 'Moon-secret-key',
      { 
        expiresIn: process.env.JWT_EXPIRE || '24h',
        issuer: 'moonne-backend'
      }
    );
  }

  /**
   * X√°c minh JWT token
   * @param {string} token 
   * @returns {Object} { success, data?, error? }
   */
  verifyToken(token) {
    try {
      const decoded = jwt.verify(
        token, 
        process.env.JWT_SECRET || 'Moon-secret-key'
      );
      
      return {
        success: true,
        data: decoded
      };
    } catch (error) {
      let errorMessage = 'Token kh√¥ng h·ª£p l·ªá';
      
      if (error.name === 'TokenExpiredError') {
        errorMessage = 'Token ƒë√£ h·∫øt h·∫°n';
      } else if (error.name === 'JsonWebTokenError') {
        errorMessage = 'Token kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng';
      }

      return {
        success: false,
        error: errorMessage
      };
    }
  }

  /**
   * L·∫•y th√¥ng tin user t·ª´ token
   * @param {string} token 
   * @returns {Object} { success, data?, error? }
   */
  async getUserFromToken(token) {
    try {
      // X√°c minh token
      const tokenResult = this.verifyToken(token);
      if (!tokenResult.success) {
        return tokenResult;
      }

      const { userId } = tokenResult.data;
      
      // L·∫•y user t·ª´ database  
      const user = await User.findById(userId);
      if (!user) {
        return {
          success: false,
          error: 'User kh√¥ng t·ªìn t·∫°i'
        };
      }

      // Ki·ªÉm tra tr·∫°ng th√°i
      if (user.status !== 'Ho·∫°t ƒë·ªông') {
        return {
          success: false,
          error: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a'
        };
      }

      return {
        success: true,
        data: {
          id: user._id,
          username: user.username,
          group_name: user.group_name,
          groupCode: user.groupCode,
          role: user.role,
          status: user.status,
          start_date: user.start_date,
          permissions: user.permissions
        }
      };

    } catch (error) {
      return {
        success: false,
        error: 'L·ªói x√°c th·ª±c: ' + error.message
      };
    }
  }

  /**
   * T·∫°o user m·ªõi
   * @param {Object} userData - D·ªØ li·ªáu user
   * @returns {Object} { success, data?, error? }
   */
  async createUser(userData) {
    try {
      const { username, password, group_name, groupCode } = userData;

      // Ki·ªÉm tra user ƒë√£ t·ªìn t·∫°i
      const existingUser = await User.findOne({ username });
      if (existingUser) {
        return {
          success: false,
          error: 'T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i'
        };
      }

      // Hash password
      const hashedPassword = await bcrypt.hash(password, 10);

      // X√°c ƒë·ªãnh role t·ª´ groupCode
      const role = getRoleFromGroupCode(groupCode) || 'FK';

      // T·∫°o user m·ªõi
      const newUser = new User({
        username,
        password: hashedPassword,
        group_name,
        groupCode,
        role,
        status: 'Ho·∫°t ƒë·ªông',
        start_date: new Date()
      });

      await newUser.save();

      return {
        success: true,
        data: {
          id: newUser._id,
          username: newUser.username,
          group_name: newUser.group_name,
          groupCode: newUser.groupCode,
          role: newUser.role,
          status: newUser.status
        }
      };

    } catch (error) {
      return {
        success: false,
        error: 'L·ªói t·∫°o user: ' + error.message
      };
    }
  }

  /**
   * ƒê·ªïi m·∫≠t kh·∫©u
   * @param {string} userId 
   * @param {string} oldPassword 
   * @param {string} newPassword 
   * @returns {Object} { success, error? }
   */
  async changePassword(userId, oldPassword, newPassword) {
    try {
      const user = await User.findById(userId).select('+password');
      if (!user) {
        return {
          success: false,
          error: 'User kh√¥ng t·ªìn t·∫°i'
        };
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
      const isValidOldPassword = await bcrypt.compare(oldPassword, user.password);
      if (!isValidOldPassword) {
        return {
          success: false,
          error: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng'
        };
      }

      // Hash m·∫≠t kh·∫©u m·ªõi
      const hashedNewPassword = await bcrypt.hash(newPassword, 10);
      
      // C·∫≠p nh·∫≠t
      await User.findByIdAndUpdate(userId, {
        password: hashedNewPassword
      });

      return { success: true };

    } catch (error) {
      return {
        success: false,
        error: 'L·ªói ƒë·ªïi m·∫≠t kh·∫©u: ' + error.message
      };
    }
  }
}

module.exports = new AuthService();
