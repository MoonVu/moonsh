const RequestReport = require('../models/RequestReport');
const WorkSchedule = require('../models/WorkSchedule');
const User = require('../models/User');
const DemoLichDiCa = require('../models/DemoLichDiCa'); // Th√™m import DemoLichDiCa

class RequestService {
  // T·∫°o request m·ªõi
  async createRequest(requestData) {
    try {
      const request = new RequestReport(requestData);
      const savedRequest = await request.save();
      
      // Populate user info
      await savedRequest.populate('user', 'username group_name');
      
      return savedRequest;
    } catch (error) {
      throw new Error(`L·ªói t·∫°o request: ${error.message}`);
    }
  }



  // L·∫•y danh s√°ch request c·ªßa user
  async getUserRequests(userId, filters = {}) {
    try {
      const query = { user_id: userId };
      
      if (filters.status) {
        query.status = filters.status;
      }
      
      if (filters.request_type) {
        query.request_type = filters.request_type;
      }
      
      if (filters.date_from || filters.date_to) {
        query.created_at = {};
        if (filters.date_from) {
          query.created_at.$gte = new Date(filters.date_from);
        }
        if (filters.date_to) {
          query.created_at.$lte = new Date(filters.date_to);
        }
      }
      
      const requests = await RequestReport.find(query)
        .populate('user', 'username group_name')
        .populate('processed_by', 'username')
        .sort({ created_at: -1 });
      
      return requests;
    } catch (error) {
      throw new Error(`L·ªói l·∫•y danh s√°ch request: ${error.message}`);
    }
  }

  // L·∫•y t·∫•t c·∫£ request (cho admin)
  async getAllRequests(filters = {}) {
    try {
      const query = {};
      
      if (filters.status) {
        query.status = filters.status;
      }
      
      if (filters.request_type) {
        query.request_type = filters.request_type;
      }
      
      if (filters.user_id) {
        query.user_id = filters.user_id;
      }
      
      if (filters.date_from || filters.date_to) {
        query.created_at = {};
        if (filters.date_from) {
          query.created_at.$gte = new Date(filters.date_from);
        }
        if (filters.date_to) {
          query.created_at.$lte = new Date(filters.date_to);
        }
      }
      
      const requests = await RequestReport.find(query)
        .populate('user', 'username group_name groupCode')
        .populate('processed_by', 'username')
        .sort({ created_at: -1 });
      
      return requests;
    } catch (error) {
      throw new Error(`L·ªói l·∫•y t·∫•t c·∫£ request: ${error.message}`);
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i request (admin) - DEPRECATED, s·ª≠ d·ª•ng function b√™n d∆∞·ªõi
  async updateRequestStatus(requestId, newStatus, adminId, note = '') {
    try {
      const request = await RequestReport.findById(requestId);
      if (!request) {
        throw new Error('Kh√¥ng t√¨m th·∫•y request');
      }
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      await request.updateStatus(newStatus, adminId, note);
      
      // N·∫øu request ƒë∆∞·ª£c duy·ªát, t·∫°o work schedule v√† c·∫≠p nh·∫≠t l·ªãch ƒëi ca
      if (newStatus === 'approved') {
        await this.createWorkScheduleFromRequest(request);
        await this.updateDemoLichDiCaFromRequest(request); // Th√™m function m·ªõi
      }
      
      // Populate l·∫°i th√¥ng tin
      await request.populate('user', 'username group_name');
      await request.populate('processed_by', 'username');
      
      return request;
    } catch (error) {
      throw new Error(`L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i request: ${error.message}`);
    }
  }

  // T·∫°o work schedule t·ª´ request ƒë√£ duy·ªát
  async createWorkScheduleFromRequest(request) {
    try {
      // Ki·ªÉm tra xem ƒë√£ c√≥ work schedule cho ng√†y n√†y ch∆∞a
      const existingSchedule = await WorkSchedule.findOne({
        user_id: request.user_id,
        date: request.metadata.date || request.metadata.from_date
      });
      
      if (existingSchedule) {
        // C·∫≠p nh·∫≠t schedule hi·ªán t·∫°i
        existingSchedule.status = WorkSchedule.mapRequestTypeToStatus(request.request_type);
        existingSchedule.note = request.description;
        existingSchedule.request_id = request._id;
        existingSchedule.approved_by = request.processed_by;
        existingSchedule.approved_at = request.processed_at;
        existingSchedule.metadata = WorkSchedule.extractMetadata(request);
        
        return await existingSchedule.save();
      } else {
        // T·∫°o schedule m·ªõi
        return await WorkSchedule.createFromRequest(request);
      }
    } catch (error) {
      throw new Error(`L·ªói t·∫°o work schedule: ${error.message}`);
    }
  }

  // L·∫•y work schedule c·ªßa user
  async getUserWorkSchedule(userId, dateFrom, dateTo) {
    try {
      const query = { user_id: userId };
      
      if (dateFrom || dateTo) {
        query.date = {};
        if (dateFrom) {
          query.date.$gte = new Date(dateFrom);
        }
        if (dateTo) {
          query.date.$lte = new Date(dateTo);
        }
      }
      
      const schedules = await WorkSchedule.find(query)
        .populate('user', 'username group_name')
        .populate('request', 'content description')
        .populate('approved_by', 'username')
        .sort({ date: 1 });
      
      return schedules;
    } catch (error) {
      throw new Error(`L·ªói l·∫•y work schedule: ${error.message}`);
    }
  }

  // L·∫•y th·ªëng k√™ request
  async getRequestStats(filters = {}) {
    try {
      const matchStage = {};
      
      if (filters.date_from || filters.date_to) {
        matchStage.created_at = {};
        if (filters.date_from) {
          matchStage.created_at.$gte = new Date(filters.date_from);
        }
        if (filters.date_to) {
          matchStage.created_at.$lte = new Date(filters.date_to);
        }
      }
      
      if (filters.user_id) {
        matchStage.user_id = filters.user_id;
      }
      
      const stats = await RequestReport.aggregate([
        { $match: matchStage },
        {
          $group: {
            _id: {
              status: '$status',
              request_type: '$request_type'
            },
            count: { $sum: 1 }
          }
        },
        {
          $group: {
            _id: '$_id.status',
            types: {
              $push: {
                request_type: '$_id.request_type',
                count: '$count'
              }
            },
            total: { $sum: '$count' }
          }
        }
      ]);
      
      return stats;
    } catch (error) {
      throw new Error(`L·ªói l·∫•y th·ªëng k√™: ${error.message}`);
    }
  }

  // L·∫•y request theo ID
  async getRequestById(requestId) {
    try {
      const request = await RequestReport.findById(requestId)
        .populate('user', 'username group_name groupCode')
        .populate('processed_by', 'username');
      
      return request;
    } catch (error) {
      throw new Error(`L·ªói l·∫•y request: ${error.message}`);
    }
  }

  // X√≥a request (ch·ªâ khi c√≤n pending)
  async deleteRequest(requestId, userId, userRole) {
    try {
      const request = await RequestReport.findById(requestId);
      if (!request) {
        throw new Error('Kh√¥ng t√¨m th·∫•y request');
      }
      
      if (!request.canEdit(userId, userRole)) {
        throw new Error('Kh√¥ng c√≥ quy·ªÅn x√≥a request n√†y');
      }
      
      await RequestReport.findByIdAndDelete(requestId);
      return { message: 'ƒê√£ x√≥a request th√†nh c√¥ng' };
    } catch (error) {
      throw new Error(`L·ªói x√≥a request: ${error.message}`);
    }
  }

  // C·∫≠p nh·∫≠t n·ªôi dung request
  async updateRequest(requestId, updateData) {
    try {
      const request = await RequestReport.findById(requestId);
      if (!request) {
        throw new Error('Kh√¥ng t√¨m th·∫•y request');
      }
      
      // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c ph√©p
      if (updateData.description !== undefined) {
        request.description = updateData.description;
      }
      
      if (updateData.metadata) {
        request.metadata = {
          ...request.metadata,
          ...updateData.metadata
        };
      }
      
      // C·∫≠p nh·∫≠t th·ªùi gian
      request.updated_at = new Date();
      
      const updatedRequest = await request.save();
      
      // Populate user info
      await updatedRequest.populate('user', 'username group_name groupCode');
      
      return updatedRequest;
    } catch (error) {
      throw new Error(`L·ªói c·∫≠p nh·∫≠t request: ${error.message}`);
    }
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i request (ph√™ duy·ªát/t·ª´ ch·ªëi) - FUNCTION CH√çNH
  async updateRequestStatus(requestId, newStatus, adminId, adminNote = '') {
    try {
      console.log('üîÑ updateRequestStatus ƒë∆∞·ª£c g·ªçi v·ªõi:', {
        requestId,
        newStatus,
        adminId,
        adminNote
      });

      const request = await RequestReport.findById(requestId);
      if (!request) {
        throw new Error('Kh√¥ng t√¨m th·∫•y request');
      }
      
      console.log('üìã Request t√¨m th·∫•y:', {
        id: request._id,
        userId: request.user_id,
        requestType: request.request_type,
        status: request.status,
        fromDate: request.metadata?.from_date,
        toDate: request.metadata?.to_date
      });
      
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i
      request.status = newStatus;
      request.processed_by = adminId;
      request.processed_at = new Date();
      
      // C·∫≠p nh·∫≠t ghi ch√∫ admin n·∫øu c√≥
      if (adminNote) {
        request.admin_note = adminNote;
      }
      
      // C·∫≠p nh·∫≠t th·ªùi gian
      request.updated_at = new Date();
      
      const updatedRequest = await request.save();
      console.log('‚úÖ Request ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i:', updatedRequest.status);
      
      // N·∫øu request ƒë∆∞·ª£c duy·ªát, c·∫≠p nh·∫≠t l·ªãch ƒëi ca
      if (newStatus === 'approved') {
        console.log('üéØ Request ƒë∆∞·ª£c duy·ªát, b·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t DemoLichDiCa...');
        try {
          await this.updateDemoLichDiCaFromRequest(request);
          console.log('‚úÖ DemoLichDiCa ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng');
        } catch (demoError) {
          console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t DemoLichDiCa:', demoError);
          // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác ph√™ duy·ªát request
        }
      }
      
      // Populate user info
      await updatedRequest.populate('user', 'username group_name groupCode');
      await updatedRequest.populate('processed_by', 'username');
      
      return updatedRequest;
    } catch (error) {
      console.error('‚ùå L·ªói trong updateRequestStatus:', error);
      throw new Error(`L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i request: ${error.message}`);
    }
  }

  // Function m·ªõi: C·∫≠p nh·∫≠t ScheduleCopy khi request ƒë∆∞·ª£c duy·ªát
  async updateDemoLichDiCaFromRequest(request) {
    try {
      console.log('üîÑ ƒêang c·∫≠p nh·∫≠t ScheduleCopy t·ª´ request ƒë√£ duy·ªát:', {
        requestId: request._id,
        userId: request.user_id,
        requestType: request.request_type,
        fromDate: request.metadata.from_date,
        toDate: request.metadata.to_date
      });

      // L·∫•y th√¥ng tin ng√†y t·ª´ request
      const fromDate = request.metadata?.from_date;
      const toDate = request.metadata?.to_date;
      
      if (!fromDate) {
        console.log('‚ö†Ô∏è Request kh√¥ng c√≥ from_date, b·ªè qua c·∫≠p nh·∫≠t ScheduleCopy');
        return;
      }

      // X√°c ƒë·ªãnh th√°ng v√† nƒÉm
      const startDate = new Date(fromDate);
      const month = startDate.getMonth() + 1; // getMonth() tr·∫£ v·ªÅ 0-11
      const year = startDate.getFullYear();

      // X√°c ƒë·ªãnh tr·∫°ng th√°i d·ª±a tr√™n lo·∫°i request
      let status = '';
      
      switch (request.request_type) {
        case 'monthly_off':
          status = 'OFF';
          break;
        case 'half_day_off':
          status = '1/2';
          break;
        default:
          console.log('‚ö†Ô∏è Lo·∫°i request ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£:', request.request_type);
          console.log('üìù Ch·ªâ h·ªó tr·ª£ monthly_off v√† half_day_off hi·ªán t·∫°i');
          return; // B·ªè qua c√°c lo·∫°i request kh√°c
      }

      console.log('üìÖ Th√¥ng tin c·∫≠p nh·∫≠t:', {
        month,
        year,
        status,
        requestType: request.request_type
      });

      // T√¨m t·∫•t c·∫£ ScheduleCopy trong th√°ng/nƒÉm n√†y
      const ScheduleCopy = require('../models/ScheduleCopy');
      
      const scheduleCopies = await ScheduleCopy.find({
        month: month,
        year: year
      });

      console.log(`üîç T√¨m th·∫•y ${scheduleCopies.length} b·∫£n sao cho th√°ng ${month}/${year}`);
      
      if (scheduleCopies.length === 0) {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ b·∫£n sao n√†o cho th√°ng/nƒÉm n√†y, kh√¥ng th·ªÉ c·∫≠p nh·∫≠t');
        return;
      }

      // C·∫≠p nh·∫≠t t·∫•t c·∫£ b·∫£n sao
      for (const scheduleCopy of scheduleCopies) {
        console.log(`üîÑ ƒêang c·∫≠p nh·∫≠t b·∫£n sao: ${scheduleCopy.name}`);
        
        // Ki·ªÉm tra xem c√≥ scheduleData kh√¥ng
        if (!scheduleCopy.scheduleData || typeof scheduleCopy.scheduleData !== 'object') {
          console.log('‚ö†Ô∏è B·∫£n sao kh√¥ng c√≥ scheduleData h·ª£p l·ªá, b·ªè qua');
          continue;
        }

        // T√¨m user trong scheduleData
        const userId = request.user_id.toString();
        
        if (!scheduleCopy.scheduleData[userId]) {
          console.log(`‚ö†Ô∏è User ${userId} kh√¥ng c√≥ trong b·∫£n sao n√†y, b·ªè qua`);
          continue;
        }

        // T·∫°o m·ªõi dailyStatus thay v√¨ c·∫≠p nh·∫≠t c≈©
        let userDailyStatus = {};

        // X·ª≠ l√Ω theo lo·∫°i request
        if (toDate && toDate !== fromDate) {
          // Request c√≥ kho·∫£ng th·ªùi gian (nhi·ªÅu ng√†y) - cho monthly_off v√† half_day_off
          const endDate = new Date(toDate);
          const currentDate = new Date(startDate);
          
          while (currentDate <= endDate) {
            const day = currentDate.getDate();
            userDailyStatus[day.toString()] = status;
            
            // TƒÉng l√™n 1 ng√†y
            currentDate.setDate(currentDate.getDate() + 1);
          }
        } else {
          // Request ch·ªâ 1 ng√†y
          const day = startDate.getDate();
          userDailyStatus[day.toString()] = status;
        }

        // C·∫≠p nh·∫≠t scheduleData c·ªßa user - Force MongoDB nh·∫≠n ra thay ƒë·ªïi
        scheduleCopy.set(`scheduleData.${userId}`, userDailyStatus);
        scheduleCopy.markModified('scheduleData');
        
        console.log(`üìÖ ƒê√£ c·∫≠p nh·∫≠t user ${userId} v·ªõi ${Object.keys(userDailyStatus).length} ng√†y`);
        
        // L∆∞u b·∫£n sao
        await scheduleCopy.save();
        console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£n sao ${scheduleCopy.name} th√†nh c√¥ng`);
      }

      console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t t·∫•t c·∫£ ScheduleCopy th√†nh c√¥ng');

    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t ScheduleCopy:', error);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác ph√™ duy·ªát request
      // Ch·ªâ log l·ªói ƒë·ªÉ debug
    }
  }
}

module.exports = new RequestService();
