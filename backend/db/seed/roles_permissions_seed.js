const mongoose = require('mongoose');
const Role = require('../../models/Role');
const Permission = require('../../models/Permission');
const { ROLE_PERMISSIONS, RESOURCES, PERMISSIONS } = require('../../src/config/permissions');

/**
 * Seed roles v√† permissions v√†o database
 */
async function seedRolesAndPermissions() {
  try {
    console.log('üå± B·∫Øt ƒë·∫ßu seed roles v√† permissions...');

    // Ki·ªÉm tra c√≥ users n√†o ƒëang s·ª≠ d·ª•ng roles kh√¥ng
    const User = require('../../models/User');
    const userCount = await User.countDocuments({ role: { $exists: true, $ne: null } });
    
    if (userCount > 0) {
      console.log(`‚ö†Ô∏è C√≥ ${userCount} users ƒëang s·ª≠ d·ª•ng roles. Ch·ªâ c·∫≠p nh·∫≠t permissions, kh√¥ng x√≥a roles.`);
      
      // Ch·ªâ x√≥a permissions, gi·ªØ roles
      await Permission.deleteMany({});
      console.log('üóëÔ∏è ƒê√£ x√≥a permissions c≈©, gi·ªØ nguy√™n roles');
    } else {
      // X√≥a d·ªØ li·ªáu c≈© n·∫øu kh√¥ng c√≥ users
      await Role.deleteMany({});
      await Permission.deleteMany({});
      console.log('üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu c≈©');
    }

    // T·∫°o permissions t·ª´ RESOURCES v√† PERMISSIONS
    const permissionsToCreate = [];
    
    Object.values(RESOURCES).forEach(resource => {
      Object.values(PERMISSIONS).forEach(action => {
        permissionsToCreate.push({
          resource: resource,
          action: action,
          displayName: `${getResourceLabel(resource)} - ${getActionLabel(action)}`,
          description: `Quy·ªÅn ${getActionLabel(action)} cho ${getResourceLabel(resource)}`,
          category: getResourceCategory(resource),
          isActive: true
        });
      });
    });

    const createdPermissions = await Permission.insertMany(permissionsToCreate);
    console.log(`‚úÖ ƒê√£ t·∫°o ${createdPermissions.length} permissions`);

    // T·∫°o roles v·ªõi permissions t·ª´ config
    const rolesToCreate = [
      {
        name: 'ADMIN',
        displayName: 'Qu·∫£n tr·ªã vi√™n',
        description: 'C√≥ to√†n quy·ªÅn truy c·∫≠p h·ªá th·ªëng',
        permissions: convertRolePermissions('ADMIN'),
        isActive: true
      },
      {
        name: 'XNK',
        displayName: 'XNK', 
        description: 'Xu·∫•t Nh·∫≠p Kho·∫£n',
        permissions: convertRolePermissions('XNK'),
        isActive: true
      },
      {
        name: 'CSKH',
        displayName: 'CSKH',
        description: 'CSKH',
        permissions: convertRolePermissions('CSKH'),
        isActive: true
      },
      {
        name: 'FK',
        displayName: 'Duy·ªát ƒë∆°n',
        description: 'Duy·ªát ƒë∆°n',
        permissions: convertRolePermissions('FK'),
        isActive: true
      }
    ];

    const createdRoles = await Role.insertMany(rolesToCreate);
    console.log(`‚úÖ ƒê√£ t·∫°o ${createdRoles.length} roles`);

    console.log('üéâ Seed ho√†n th√†nh!');
    return { permissions: createdPermissions, roles: createdRoles };

  } catch (error) {
    console.error('‚ùå L·ªói khi seed:', error);
    throw error;
  }
}

/**
 * Convert role permissions t·ª´ config sang format database
 */
function convertRolePermissions(roleName) {
  const rolePerms = ROLE_PERMISSIONS[roleName] || {};
  const permissions = [];

  Object.entries(rolePerms).forEach(([resource, actions]) => {
    if (Array.isArray(actions)) {
      permissions.push({
        resource: resource,
        actions: actions
      });
    }
  });

  return permissions;
}

/**
 * L·∫•y label cho resource
 */
function getResourceLabel(resource) {
  const labels = {
    'administrator_access': 'Quy·ªÅn qu·∫£n tr·ªã',
    'user_management': 'Qu·∫£n l√Ω ng∆∞·ªùi d√πng',
    'content_management': 'Qu·∫£n l√Ω n·ªôi dung',
    'financial_management': 'Qu·∫£n l√Ω t√†i ch√≠nh',
    'reporting': 'B√°o c√°o',
    'payroll': 'B·∫£ng l∆∞∆°ng',
    'disputes_management': 'X·ª≠ l√Ω khi·∫øu n·∫°i',
    'api_controls': 'ƒêi·ªÅu khi·ªÉn API',
    'database_management': 'Qu·∫£n l√Ω c∆° s·ªü d·ªØ li·ªáu',
    'repository_management': 'Qu·∫£n l√Ω kho d·ªØ li·ªáu',
    'schedules': 'L·ªãch tr√¨nh',
    'users': 'Ng∆∞·ªùi d√πng',
    'tasks': 'Nhi·ªám v·ª•',
    'seats': 'Ch·ªó ng·ªìi',
    'notifications': 'Th√¥ng b√°o',
    'reports': 'B√°o c√°o',
    'system': 'H·ªá th·ªëng'
  };
  return labels[resource] || resource;
}

/**
 * L·∫•y label cho action
 */
function getActionLabel(action) {
  const labels = {
    'view': 'Xem',
    'edit': 'S·ª≠a',
    'delete': 'X√≥a'
  };
  return labels[action] || action;
}

/**
 * L·∫•y category cho resource
 */
function getResourceCategory(resource) {
  const categories = {
    'administrator_access': 'admin',
    'user_management': 'management',
    'content_management': 'management', 
    'financial_management': 'finance',
    'reporting': 'reports',
    'payroll': 'finance',
    'disputes_management': 'support',
    'api_controls': 'system',
    'database_management': 'system',
    'repository_management': 'system',
    'schedules': 'operations',
    'users': 'management',
    'tasks': 'operations',
    'seats': 'operations',
    'notifications': 'system',
    'reports': 'reports',
    'system': 'system'
  };
  return categories[resource] || 'general';
}

module.exports = { seedRolesAndPermissions };