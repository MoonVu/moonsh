/**
 * Script s·ª≠a role cho users d·ª±a tr√™n groupCode
 */

const mongoose = require('mongoose');
const User = require('../models/User');
const Role = require('../models/Role');
const { getRoleFromGroupCode } = require('../src/config/role-map');
require('dotenv').config({ path: '../config.env' });

async function fixUserRoles() {
  try {
    console.log('üîß S·ª≠a role cho users d·ª±a tr√™n groupCode...');
    
    // K·∫øt n·ªëi database
    const mongoUrl = process.env.MONGODB_URI || 'mongodb://localhost:27017/Moon';
    await mongoose.connect(mongoUrl);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database');

    // L·∫•y t·∫•t c·∫£ roles
    const roles = await Role.find();
    const roleMap = new Map();
    roles.forEach(role => {
      roleMap.set(role.name, role._id);
    });

    console.log('üìã Available roles:', Array.from(roleMap.keys()));

    // L·∫•y t·∫•t c·∫£ users c√≥ groupCode
    const users = await User.find({ groupCode: { $exists: true, $ne: null } });
    console.log(`üîç T√¨m th·∫•y ${users.length} users c√≥ groupCode`);

    let updatedCount = 0;
    let errorCount = 0;

    for (const user of users) {
      try {
        // L·∫•y role t·ª´ groupCode
        const expectedRole = getRoleFromGroupCode(user.groupCode);
        const expectedRoleId = roleMap.get(expectedRole);
        
        console.log(`üë§ User ${user.username}:`);
        console.log(`   - GroupCode: ${user.groupCode}`);
        console.log(`   - Expected role: ${expectedRole}`);
        console.log(`   - Current role: ${user.roleString}`);
        
        if (expectedRole && expectedRoleId) {
          // C·∫≠p nh·∫≠t role n·∫øu kh√°c
          if (user.roleString !== expectedRole) {
            user.role = expectedRoleId;
            user.roleString = expectedRole;
            await user.save();
            console.log(`   ‚úÖ Updated: ${user.roleString} -> ${expectedRole}`);
            updatedCount++;
          } else {
            console.log(`   ‚è≠Ô∏è Already correct`);
          }
        } else {
          console.log(`   ‚ö†Ô∏è No role mapping for groupCode: ${user.groupCode}`);
        }
        
      } catch (error) {
        console.error(`   ‚ùå Error updating user ${user.username}:`, error.message);
        errorCount++;
      }
    }

    console.log(`\nüéâ Ho√†n th√†nh: ${updatedCount} users ƒë∆∞·ª£c c·∫≠p nh·∫≠t, ${errorCount} l·ªói`);
    
    // Ki·ªÉm tra user Moon c·ª• th·ªÉ
    const moon = await User.findOne({ username: 'Moon' }).populate('role');
    if (moon) {
      console.log('\nüë§ User Moon sau khi fix:');
      console.log('- Username:', moon.username);
      console.log('- GroupCode:', moon.groupCode);
      console.log('- Role Name:', moon.role?.name);
      console.log('- Role String:', moon.roleString);
      console.log('- Permissions count:', moon.role?.permissions?.length);
    }
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå L·ªói fix roles:', error);
    process.exit(1);
  }
}

fixUserRoles();
