#!/usr/bin/env node

/**
 * Script comprehensive ƒë·ªÉ s·ª≠a to√†n b·ªô v·∫•n ƒë·ªÅ user roles
 * 1. T·∫°o l·∫°i role FK n·∫øu thi·∫øu
 * 2. G·∫Øn l·∫°i role ObjectId cho t·∫•t c·∫£ users
 * 3. ƒê·∫£m b·∫£o sync gi·ªØa role v√† roleString
 */

const mongoose = require('mongoose');
require('dotenv').config({ path: './config.env' });

const User = require('../models/User');
const Role = require('../models/Role');

async function fixAllUserRoles() {
  try {
    console.log('üîß B·∫Øt ƒë·∫ßu s·ª≠a to√†n b·ªô user roles...');
    
    // K·∫øt n·ªëi database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database');

    // B∆∞·ªõc 1: Ki·ªÉm tra v√† t·∫°o l·∫°i roles n·∫øu thi·∫øu
    console.log('\nüìã B∆∞·ªõc 1: Ki·ªÉm tra roles...');
    const existingRoles = await Role.find({});
    console.log('Roles hi·ªán c√≥:', existingRoles.map(r => r.name));

    const requiredRoles = ['ADMIN', 'XNK', 'CSKH', 'FK'];
    const missingRoles = requiredRoles.filter(name => 
      !existingRoles.find(r => r.name === name)
    );

    if (missingRoles.length > 0) {
      console.log('‚ùå Thi·∫øu roles:', missingRoles);
      console.log('üîß T·∫°o l·∫°i roles thi·∫øu...');
      
      for (const roleName of missingRoles) {
        const roleData = {
          name: roleName,
          displayName: getRoleDisplayName(roleName),
          description: getRoleDescription(roleName),
          permissions: getDefaultPermissions(roleName),
          isActive: true
        };
        
        const newRole = new Role(roleData);
        await newRole.save();
        console.log(`‚úÖ ƒê√£ t·∫°o role: ${roleName}`);
      }
    } else {
      console.log('‚úÖ T·∫•t c·∫£ roles c·∫ßn thi·∫øt ƒë√£ c√≥');
    }

    // B∆∞·ªõc 2: L·∫•y l·∫°i t·∫•t c·∫£ roles (bao g·ªìm m·ªõi t·∫°o)
    const allRoles = await Role.find({});
    console.log('\nüìã Roles sau khi ki·ªÉm tra:', allRoles.map(r => ({ _id: r._id, name: r.name })));

    // T·∫°o mapping role name -> ObjectId
    const roleMap = {};
    allRoles.forEach(role => {
      roleMap[role.name] = role._id;
    });

    // B∆∞·ªõc 3: S·ª≠a t·∫•t c·∫£ users
    console.log('\nüîß B∆∞·ªõc 3: S·ª≠a t·∫•t c·∫£ users...');
    const allUsers = await User.find({});
    console.log(`T√¨m th·∫•y ${allUsers.length} users c·∫ßn s·ª≠a`);

    let fixedCount = 0;
    let errorCount = 0;

    for (const user of allUsers) {
      try {
        let targetRole = 'FK'; // Default role

        // ∆Øu ti√™n roleString n·∫øu c√≥ v√† h·ª£p l·ªá
        if (user.roleString && roleMap[user.roleString]) {
          targetRole = user.roleString;
        }
        // Fallback sang groupCode mapping
        else if (user.groupCode && getRoleFromGroupCode(user.groupCode)) {
          targetRole = getRoleFromGroupCode(user.groupCode);
        }
        // Fallback sang group_name mapping
        else if (user.group_name && getRoleFromGroupCode(user.group_name)) {
          targetRole = getRoleFromGroupCode(user.group_name);
        }

        const roleObjectId = roleMap[targetRole];
        
        console.log(`üë§ User: ${user.username}`);
        console.log(`   - roleString: ${user.roleString}`);
        console.log(`   - groupCode: ${user.groupCode}`);
        console.log(`   - group_name: ${user.group_name}`);
        console.log(`   - G·∫Øn role: ${targetRole} (${roleObjectId})`);

        // Update user
        await User.findByIdAndUpdate(user._id, {
          role: roleObjectId,
          roleString: targetRole // ƒê·∫£m b·∫£o roleString c≈©ng ƒë√∫ng
        });

        fixedCount++;
        console.log(`   ‚úÖ ƒê√£ s·ª≠a`);

      } catch (error) {
        errorCount++;
        console.error(`   ‚ùå L·ªói khi s·ª≠a user ${user.username}:`, error.message);
      }
    }

    console.log('\nüìä K·∫øt qu·∫£:');
    console.log(`‚úÖ ƒê√£ s·ª≠a: ${fixedCount} users`);
    console.log(`‚ùå L·ªói: ${errorCount} users`);

    // B∆∞·ªõc 4: Ki·ªÉm tra l·∫°i
    console.log('\nüîç B∆∞·ªõc 4: Ki·ªÉm tra l·∫°i...');
    const usersWithNullRole = await User.find({ role: null });
    console.log(`Users c√≤n role null: ${usersWithNullRole.length}`);

    if (usersWithNullRole.length > 0) {
      console.log('‚ùå C√≤n users ch∆∞a ƒë∆∞·ª£c s·ª≠a:');
      usersWithNullRole.forEach(u => {
        console.log(`  - ${u.username}: roleString=${u.roleString}, groupCode=${u.groupCode}`);
      });
    } else {
      console.log('‚úÖ T·∫•t c·∫£ users ƒë√£ c√≥ role h·ª£p l·ªá!');
    }

    // B∆∞·ªõc 5: Test populate
    console.log('\nüß™ B∆∞·ªõc 5: Test populate...');
    const testUser = await User.findOne({ username: 'Moon' }).populate('role');
    if (testUser && testUser.role) {
      console.log(`‚úÖ User Moon c√≥ role: ${testUser.role.name} (${testUser.role._id})`);
    } else {
      console.log('‚ùå User Moon v·∫´n kh√¥ng c√≥ role!');
    }

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã ƒê√£ ng·∫Øt k·∫øt n·ªëi database');
  }
}

// Helper functions
function getRoleDisplayName(roleName) {
  const displayNames = {
    'ADMIN': 'Qu·∫£n tr·ªã vi√™n',
    'XNK': 'Xu·∫•t nh·∫≠p kh·∫©u',
    'CSKH': 'ChƒÉm s√≥c kh√°ch h√†ng',
    'FK': 'T√†i ch√≠nh k·∫ø to√°n'
  };
  return displayNames[roleName] || roleName;
}

function getRoleDescription(roleName) {
  const descriptions = {
    'ADMIN': 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng v·ªõi quy·ªÅn cao nh·∫•t',
    'XNK': 'Nh√¢n vi√™n xu·∫•t nh·∫≠p kh·∫©u',
    'CSKH': 'Nh√¢n vi√™n chƒÉm s√≥c kh√°ch h√†ng',
    'FK': 'Nh√¢n vi√™n t√†i ch√≠nh k·∫ø to√°n'
  };
  return descriptions[roleName] || '';
}

function getRoleFromGroupCode(groupCode) {
  const groupToRoleMap = {
    'CQ': 'ADMIN',
    'PCQ': 'ADMIN', 
    'TT': 'XNK',
    'XNK': 'XNK',
    'FK': 'FK',
    'FK-X': 'FK',
    'CSKH': 'CSKH',
    'CSOL': 'CSKH',
    'CSDL': 'CSKH',
    'Truy·ªÅn th√¥ng': 'CSKH'
  };
  return groupToRoleMap[groupCode] || 'FK';
}

function getDefaultPermissions(roleName) {
  const { RESOURCES, PERMISSIONS } = require('../src/config/permissions');
  
  const rolePermissions = {
    'ADMIN': [
      { resource: RESOURCES.ADMINISTRATOR_ACCESS, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT, PERMISSIONS.DELETE] },
      { resource: RESOURCES.USER_MANAGEMENT, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT, PERMISSIONS.DELETE] },
      { resource: RESOURCES.SCHEDULES, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT, PERMISSIONS.DELETE] },
      { resource: RESOURCES.USERS, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT, PERMISSIONS.DELETE] }
    ],
    'XNK': [
      { resource: RESOURCES.USER_MANAGEMENT, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] },
      { resource: RESOURCES.SCHEDULES, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] },
      { resource: RESOURCES.USERS, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] }
    ],
    'CSKH': [
      { resource: RESOURCES.USER_MANAGEMENT, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] },
      { resource: RESOURCES.SCHEDULES, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] },
      { resource: RESOURCES.USERS, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] }
    ],
    'FK': [
      { resource: RESOURCES.FINANCIAL_MANAGEMENT, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] },
      { resource: RESOURCES.SCHEDULES, actions: [PERMISSIONS.VIEW, PERMISSIONS.EDIT] },
      { resource: RESOURCES.USERS, actions: [PERMISSIONS.VIEW] }
    ]
  };
  
  return rolePermissions[roleName] || [];
}

if (require.main === module) {
  fixAllUserRoles();
}

module.exports = { fixAllUserRoles };
