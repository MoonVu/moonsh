const fs = require('fs');
const path = require('path');
const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const TelegramResponse = require('../models/TelegramResponse');

// K·∫øt n·ªëi MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/Moon';
mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng'))
.catch(err => console.error('‚ùå L·ªói k·∫øt n·ªëi MongoDB:', err));

async function cleanupOldImages() {
  try {
    console.log('üßπ B·∫Øt ƒë·∫ßu cleanup ·∫£nh c≈©...');
    
    const uploadsDir = path.join(__dirname, '../uploads');
    if (!fs.existsSync(uploadsDir)) {
      console.log('üìÅ Th∆∞ m·ª•c uploads kh√¥ng t·ªìn t·∫°i');
      return;
    }
    
    // L·∫•y t·∫•t c·∫£ files trong uploads
    const files = fs.readdirSync(uploadsDir);
    console.log(`üìä T√¨m th·∫•y ${files.length} files trong uploads`);
    
    // L·∫•y t·∫•t c·∫£ imageUrl ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong database
    const bills = await TelegramResponse.find({}, 'imageUrl').lean();
    const usedImages = new Set();
    
    bills.forEach(bill => {
      if (bill.imageUrl) {
        const filename = path.basename(bill.imageUrl);
        usedImages.add(filename);
      }
    });
    
    console.log(`üìä C√≥ ${usedImages.size} ·∫£nh ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng trong database`);
    
    // X√≥a ·∫£nh kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng v√† c≈© h∆°n 30 ng√†y
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    let deletedCount = 0;
    let keptCount = 0;
    
    for (const file of files) {
      const filePath = path.join(uploadsDir, file);
      const stats = fs.statSync(filePath);
      const fileAge = stats.mtime;
      
      // Ki·ªÉm tra file c√≥ ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
      const isUsed = usedImages.has(file);
      
      // Ki·ªÉm tra file c√≥ c≈© h∆°n 30 ng√†y kh√¥ng
      const isOld = fileAge < thirtyDaysAgo;
      
      if (!isUsed && isOld) {
        try {
          fs.unlinkSync(filePath);
          deletedCount++;
          console.log(`üóëÔ∏è ƒê√£ x√≥a: ${file} (${fileAge.toISOString().split('T')[0]})`);
        } catch (error) {
          console.error(`‚ùå L·ªói x√≥a file ${file}:`, error.message);
        }
      } else {
        keptCount++;
        if (isUsed) {
          console.log(`‚úÖ Gi·ªØ l·∫°i: ${file} (ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng)`);
        } else {
          console.log(`‚úÖ Gi·ªØ l·∫°i: ${file} (ch∆∞a ƒë·ªß 30 ng√†y)`);
        }
      }
    }
    
    console.log(`\nüìä K·∫øt qu·∫£ cleanup:`);
    console.log(`   - ƒê√£ x√≥a: ${deletedCount} files`);
    console.log(`   - Gi·ªØ l·∫°i: ${keptCount} files`);
    console.log(`   - Dung l∆∞·ª£ng ti·∫øt ki·ªám: ~${(deletedCount * 1).toFixed(2)}MB (∆∞·ªõc t√≠nh 1MB/file)`);
    
  } catch (error) {
    console.error('‚ùå L·ªói cleanup:', error);
  } finally {
    mongoose.connection.close();
    process.exit(0);
  }
}

// Ch·∫°y cleanup
cleanupOldImages();


